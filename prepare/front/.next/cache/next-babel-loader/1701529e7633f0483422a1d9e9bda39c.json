{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\"; //saga의 이펙트 //all은 fork, call을 한번에 실행해준다. //put을 디스패치라고 생각하면 마음이 편한다.\n//call과 Fork의 차이는 동기, 비동기 차이이다. call은 응답이 올때까지 대기.(일종의 브레이크)\nimport axios from \"axios\";\nfunction logInAPI(data) {\n  return axios.post(\"api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(logInAPI, action.data);\n    yield put({\n      //요청성공\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //요청실패\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"api/logout\");\n}\nfunction* logOut(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(logOutAPI, action.data);\n    yield put({\n      //요청성공\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //요청실패\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //요청성공\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //요청실패\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); //while대신에 takeEvery, 대신 TakeEvery로 하게 되면 마우스를 실수로\n  //두번누르거나 했을 때 진짜로 요청이 두번 가게된다. 그래서 takeLatest로 하면 마지막 꺼만 요청이간다.\n  //응답을 취소하는거지 요청을 취소하는 것은 아님\n  //throttle을 사용하여 시간을 정해주면 그 시간안에는 단 한번만 요청을 보낼 수 있다.\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\");\n}\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"names":["all","fork","call","put","takeLatest","delay","axios","logInAPI","data","post","logIn","action","type","result","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/index.js"],"sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\"; //saga의 이펙트 //all은 fork, call을 한번에 실행해준다. //put을 디스패치라고 생각하면 마음이 편한다.\n//call과 Fork의 차이는 동기, 비동기 차이이다. call은 응답이 올때까지 대기.(일종의 브레이크)\nimport axios from \"axios\";\nfunction logInAPI(data) {\n    return axios.post(\"api/login\", data);\n}\n\nfunction* logIn(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(logInAPI, action.data);\n        yield put({\n            //요청성공\n            type: \"LOG_IN_SUCCESS\",\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            //요청실패\n            type: \"LOG_IN_FAILURE\",\n            data: err.response.data,\n        });\n    }\n}\nfunction logOutAPI() {\n    return axios.post(\"api/logout\");\n}\n\nfunction* logOut(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(logOutAPI, action.data);\n        yield put({\n            //요청성공\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            //요청실패\n            type: \"LOG_OUT_FAILURE\",\n            data: err.response.data,\n        });\n    }\n}\n\nfunction addPostAPI(data) {\n    return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            //요청성공\n            type: \"ADD_POST_SUCCESS\",\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            //요청실패\n            type: \"ADD_POST_FAILURE\",\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn); //while대신에 takeEvery, 대신 TakeEvery로 하게 되면 마우스를 실수로\n    //두번누르거나 했을 때 진짜로 요청이 두번 가게된다. 그래서 takeLatest로 하면 마지막 꺼만 요청이간다.\n    //응답을 취소하는거지 요청을 취소하는 것은 아님\n    //throttle을 사용하여 시간을 정해주면 그 시간안에는 단 한번만 요청을 보낼 수 있다.\n}\nfunction* watchLogOut() {\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n    yield takeLatest(\"ADD_POST_REQUEST\");\n}\nexport default function* rootSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,KAAK,QAAQ,oBAAoB,CAAC,CAAC;AAC9E;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQA,CAACC,IAAI,EAAE;EACpB,OAAOF,KAAK,CAACG,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACxC;AAEA,UAAUE,KAAKA,CAACC,MAAM,EAAE;EACpB,IAAI;IACA,MAAMN,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMF,GAAG,CAAC;MACN;MACAS,IAAI,EAAE,gBAAgB;MACtBJ,IAAI,EAAEK,MAAM,CAACL;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOM,GAAG,EAAE;IACV,MAAMX,GAAG,CAAC;MACN;MACAS,IAAI,EAAE,gBAAgB;MACtBJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACvB,CAAC,CAAC;EACN;AACJ;AACA,SAASQ,SAASA,CAAA,EAAG;EACjB,OAAOV,KAAK,CAACG,IAAI,CAAC,YAAY,CAAC;AACnC;AAEA,UAAUQ,MAAMA,CAACN,MAAM,EAAE;EACrB,IAAI;IACA,MAAMN,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMF,GAAG,CAAC;MACN;MACAS,IAAI,EAAE,iBAAiB;MACvBJ,IAAI,EAAEK,MAAM,CAACL;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOM,GAAG,EAAE;IACV,MAAMX,GAAG,CAAC;MACN;MACAS,IAAI,EAAE,iBAAiB;MACvBJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASU,UAAUA,CAACV,IAAI,EAAE;EACtB,OAAOF,KAAK,CAACG,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACxC;AAEA,UAAUW,OAAOA,CAACR,MAAM,EAAE;EACtB,IAAI;IACA,MAAME,MAAM,GAAG,MAAMX,IAAI,CAACgB,UAAU,EAAEP,MAAM,CAACH,IAAI,CAAC;IAClD,MAAML,GAAG,CAAC;MACN;MACAS,IAAI,EAAE,kBAAkB;MACxBJ,IAAI,EAAEK,MAAM,CAACL;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOM,GAAG,EAAE;IACV,MAAMX,GAAG,CAAC;MACN;MACAS,IAAI,EAAE,kBAAkB;MACxBJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,UAAUY,UAAUA,CAAA,EAAG;EACnB,MAAMhB,UAAU,CAAC,gBAAgB,EAAEM,KAAK,CAAC,CAAC,CAAC;EAC3C;EACA;EACA;AACJ;;AACA,UAAUW,WAAWA,CAAA,EAAG;EACpB,MAAMjB,UAAU,CAAC,iBAAiB,EAAEa,MAAM,CAAC;AAC/C;AACA,UAAUK,YAAYA,CAAA,EAAG;EACrB,MAAMlB,UAAU,CAAC,kBAAkB,CAAC;AACxC;AACA,eAAe,UAAUmB,QAAQA,CAAA,EAAG;EAChC,MAAMvB,GAAG,CAAC,CAACC,IAAI,CAACmB,UAAU,CAAC,EAAEnB,IAAI,CAACoB,WAAW,CAAC,EAAEpB,IAAI,CAACqB,YAAY,CAAC,CAAC,CAAC;AACxE"},"metadata":{},"sourceType":"module"}