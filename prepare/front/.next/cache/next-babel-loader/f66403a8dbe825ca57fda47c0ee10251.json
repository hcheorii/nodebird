{"ast":null,"code":"import { produce } from \"immer\";\nexport const initialValue = {\n  mainPosts: [],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  hasMorePost: true,\n  //true면 가져올 시도를 해라. (스크롤 했을 때)\n\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\n//가짜 데이터\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    //게시글 추가\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      //unshift란 배열의 맨 앞에다가 추가하는 함수\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    //게시글 불러오기\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(action.data);\n      //concat은 두개 이상의 배열을 합칠 때 사용\n      //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n      draft.hasMorePost = action.data.length === 10;\n      //50개보다 적으면 불러와야함\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    //댓글 추가\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS:\n      //immer버전 (너무 간단함)\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId //routes/post.js에서 PostId를 보내줌\n      ); //해당 게시글 찾기\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      //댓글 넣어주기\n      break;\n\n    //immer를 안 쓴 부분\n    // const postIndex = state.mainPosts.findIndex(\n    //     (v) => v.id === action.data.postId\n    // );\n    // const post = { ...state.mainPosts[postIndex] };\n\n    // post.Comments = [\n    //     dummyComment(action.data.content),\n    //     ...post.Comments,\n    // ]; //얕은 복사\n\n    // const mainPosts = [...state.mainPosts];\n    // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n    // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n    // return {\n    //     ...state,\n    //     mainPosts,\n    //     addCommentLoading: false,\n    //     addCommentDone: true,\n    // };\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    //게시글 삭제\n    case REMOVE_POST_REQUEST:\n      draft.removePostDone = false;\n      draft.removePostLoading = true;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    //이미지 업로드\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesDone = false;\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesError = null;\n      break;\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      draft.imagePaths = action.data;\n      break;\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    //리트윗\n    case RETWEET_REQUEST:\n      draft.retweetDone = false;\n      draft.retweetLoading = true;\n      draft.retweetError = null;\n      break;\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n    default:\n      break;\n  }\n});\nexport default reducer;","map":{"version":3,"names":["produce","initialValue","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","post","find","id","PostId","Likers","push","UserId","error","unshift","concat","length","Comments"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["import { produce } from \"immer\";\nexport const initialValue = {\n    mainPosts: [],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n\n    hasMorePost: true, //true면 가져올 시도를 해라. (스크롤 했을 때)\n\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n\n    likePostLoading: false,\n    likePostDone: false,\n    likePostError: null,\n\n    unlikePostLoading: false,\n    unlikePostDone: false,\n    unlikePostError: null,\n\n    uploadImagesLoading: false,\n    uploadImagesDone: false,\n    uploadImagesError: null,\n\n    retweetLoading: false,\n    retweetDone: false,\n    retweetError: null,\n};\n//가짜 데이터\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) =>\n    produce(state, (draft) => {\n        switch (action.type) {\n            case REMOVE_IMAGE:\n                draft.imagePaths = draft.imagePaths.filter(\n                    (v, i) => i !== action.data\n                );\n                break;\n            case LIKE_POST_REQUEST:\n                draft.likePostLoading = true;\n                draft.likePostDone = false;\n                draft.likePostError = null;\n                break;\n            case LIKE_POST_SUCCESS: {\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId\n                );\n                post.Likers.push({ id: action.data.UserId });\n                draft.likePostLoading = false;\n                draft.likePostDone = true;\n\n                break;\n            }\n            case LIKE_POST_FAILURE:\n                draft.likePostLoading = false;\n                draft.likePostError = action.error;\n                break;\n\n            case UNLIKE_POST_REQUEST:\n                draft.unlikePostLoading = true;\n                draft.unlikePostDone = false;\n                draft.unlikePostError = null;\n                break;\n            case UNLIKE_POST_SUCCESS: {\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId\n                );\n                post.Likers = post.Likers.filter(\n                    (v) => v.id !== action.data.UserId\n                );\n                draft.unlikePostLoading = false;\n                draft.unlikePostDone = true;\n                break;\n            }\n\n            case UNLIKE_POST_FAILURE:\n                draft.unlikePostLoading = false;\n                draft.unlikePostError = action.error;\n                break;\n\n            //게시글 추가\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(action.data);\n                draft.imagePaths = [];\n                //unshift란 배열의 맨 앞에다가 추가하는 함수\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n\n            //게시글 불러오기\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                draft.mainPosts = action.data.concat(action.data);\n                //concat은 두개 이상의 배열을 합칠 때 사용\n                //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n                draft.hasMorePost = action.data.length === 10;\n                //50개보다 적으면 불러와야함\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = action.error;\n                break;\n\n            //댓글 추가\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n\n            case ADD_COMMENT_SUCCESS:\n                //immer버전 (너무 간단함)\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId //routes/post.js에서 PostId를 보내줌\n                ); //해당 게시글 찾기\n                post.Comments.unshift(action.data);\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                //댓글 넣어주기\n                break;\n\n            //immer를 안 쓴 부분\n            // const postIndex = state.mainPosts.findIndex(\n            //     (v) => v.id === action.data.postId\n            // );\n            // const post = { ...state.mainPosts[postIndex] };\n\n            // post.Comments = [\n            //     dummyComment(action.data.content),\n            //     ...post.Comments,\n            // ]; //얕은 복사\n\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n            // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n\n            //게시글 삭제\n            case REMOVE_POST_REQUEST:\n                draft.removePostDone = false;\n                draft.removePostLoading = true;\n                draft.removePostError = null;\n                break;\n\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter(\n                    (v) => v.id !== action.data.PostId\n                );\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n\n            //이미지 업로드\n            case UPLOAD_IMAGES_REQUEST:\n                draft.uploadImagesDone = false;\n                draft.uploadImagesLoading = true;\n                draft.uploadImagesError = null;\n                break;\n\n            case UPLOAD_IMAGES_SUCCESS:\n                draft.uploadImagesLoading = false;\n                draft.uploadImagesDone = true;\n                draft.imagePaths = action.data;\n                break;\n            case UPLOAD_IMAGES_FAILURE:\n                draft.uploadImagesLoading = false;\n                draft.uploadImagesError = action.error;\n                break;\n\n            //리트윗\n            case RETWEET_REQUEST:\n                draft.retweetDone = false;\n                draft.retweetLoading = true;\n                draft.retweetError = null;\n                break;\n\n            case RETWEET_SUCCESS:\n                draft.retweetLoading = false;\n                draft.retweetDone = true;\n                draft.mainPosts.unshift(action.data);\n                break;\n            case RETWEET_FAILURE:\n                draft.retweetLoading = false;\n                draft.retweetError = action.error;\n                break;\n\n            default:\n                break;\n        }\n    });\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}