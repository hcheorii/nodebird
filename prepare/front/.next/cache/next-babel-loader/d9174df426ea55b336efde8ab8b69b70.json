{"ast":null,"code":"import { all, fork } from \"redux-saga/effects\";\nfunction* watchLogIn() {\n  //이벤트 리스터 같은 역할.\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); //LOG_IN이라는 액션이 실행되면, logIn함수를 실행시킨다.\n  //take는 일회용이다. takeEvery는 계속 받을 수 있다. 하지만 여러번 입력을 한번에 하게되면 그 여러개 요청이 모두 가기 때문에\n  //takeLatest를 사용한다.\n  //완료되지 않은 것들 중에서 로딩중인것들을 중단. 응답을 취소.\n  //throttle은 초를 정해서 그 안에서는 요청은 한번만 할 수 있게 설정할 수 있다.\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction logInAPI(data) {\n  //실제로 서버에 요청을 보내는 부분\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: \"LOG_IN_SUCCESS\"\n    });\n  } catch (err) {\n    put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    // const result = yield call(logOutAPI); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["all","fork","watchLogIn","takeLatest","logIn","watchLogOut","logOut","logInAPI","data","axios","post","action","delay","put","type","err","response","logOutAPI","result","userSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/user.js"],"sourcesContent":["import { all, fork } from \"redux-saga/effects\";\n\nfunction* watchLogIn() {\n    //이벤트 리스터 같은 역할.\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn); //LOG_IN이라는 액션이 실행되면, logIn함수를 실행시킨다.\n    //take는 일회용이다. takeEvery는 계속 받을 수 있다. 하지만 여러번 입력을 한번에 하게되면 그 여러개 요청이 모두 가기 때문에\n    //takeLatest를 사용한다.\n    //완료되지 않은 것들 중에서 로딩중인것들을 중단. 응답을 취소.\n    //throttle은 초를 정해서 그 안에서는 요청은 한번만 할 수 있게 설정할 수 있다.\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nfunction logInAPI(data) {\n    //실제로 서버에 요청을 보내는 부분\n    return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: \"LOG_IN_SUCCESS\" });\n    } catch (err) {\n        put({ type: \"LOG_IN_FAILURE\", data: err.response.data });\n    }\n}\n\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n    try {\n        yield delay(1000);\n        // const result = yield call(logOutAPI); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: \"LOG_OUT_SUCCESS\", data: result.data });\n    } catch (err) {\n        put({ type: \"LOG_OUT_FAILURE\", data: err.response.data });\n    }\n}\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;AAE9C,UAAUC,UAAUA,CAAA,EAAG;EACnB;EACA,MAAMC,UAAU,CAAC,gBAAgB,EAAEC,KAAK,CAAC,CAAC,CAAC;EAC3C;EACA;EACA;EACA;AACJ;;AAEA,UAAUC,WAAWA,CAAA,EAAG;EACpB,MAAMF,UAAU,CAAC,iBAAiB,EAAEG,MAAM,CAAC;AAC/C;AAEA,SAASC,QAAQA,CAACC,IAAI,EAAE;EACpB;EACA,OAAOC,KAAK,CAACC,IAAI,CAAC,YAAY,EAAEF,IAAI,CAAC;AACzC;AAEA,UAAUJ,KAAKA,CAACO,MAAM,EAAE;EACpB,IAAI;IACA,MAAMC,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMC,GAAG,CAAC;MAAEC,IAAI,EAAE;IAAiB,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVF,GAAG,CAAC;MAAEC,IAAI,EAAE,gBAAgB;MAAEN,IAAI,EAAEO,GAAG,CAACC,QAAQ,CAACR;IAAK,CAAC,CAAC;EAC5D;AACJ;AAEA,SAASS,SAASA,CAAA,EAAG;EACjB,OAAOR,KAAK,CAACC,IAAI,CAAC,aAAa,CAAC;AACpC;AAEA,UAAUJ,MAAMA,CAAA,EAAG;EACf,IAAI;IACA,MAAMM,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMC,GAAG,CAAC;MAAEC,IAAI,EAAE,iBAAiB;MAAEN,IAAI,EAAEU,MAAM,CAACV;IAAK,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOO,GAAG,EAAE;IACVF,GAAG,CAAC;MAAEC,IAAI,EAAE,iBAAiB;MAAEN,IAAI,EAAEO,GAAG,CAACC,QAAQ,CAACR;IAAK,CAAC,CAAC;EAC7D;AACJ;AACA,eAAe,UAAUW,QAAQA,CAAA,EAAG;EAChC,MAAMnB,GAAG,CAAC,CAACC,IAAI,CAACC,UAAU,CAAC,EAAED,IAAI,CAACI,WAAW,CAAC,CAAC,CAAC;AACpD"},"metadata":{},"sourceType":"module"}