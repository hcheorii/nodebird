{"ast":null,"code":"import { produce } from \"immer\";\nexport var initialValue = {\n  mainPosts: [],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  hasMorePost: true,\n  //true면 가져올 시도를 해라. (스크롤 했을 때)\n\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\n//가짜 데이터\n\nexport var LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport var LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport var LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport var UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport var UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport var UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialValue;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post2.Likers = _post2.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      //게시글 추가\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        //unshift란 배열의 맨 앞에다가 추가하는 함수\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //게시글 불러오기\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        //concat은 두개 이상의 배열을 합칠 때 사용\n        //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        //50개보다 적으면 불러와야함\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      //댓글 추가\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //immer버전 (너무 간단함)\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        } //routes/post.js에서 PostId를 보내줌\n        ); //해당 게시글 찾기\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        //댓글 넣어주기\n        break;\n\n      //immer를 안 쓴 부분\n      // const postIndex = state.mainPosts.findIndex(\n      //     (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n\n      // post.Comments = [\n      //     dummyComment(action.data.content),\n      //     ...post.Comments,\n      // ]; //얕은 복사\n\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n      // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n      // return {\n      //     ...state,\n      //     mainPosts,\n      //     addCommentLoading: false,\n      //     addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      //게시글 삭제\n      case REMOVE_POST_REQUEST:\n        draft.removePostDone = false;\n        draft.removePostLoading = true;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      //이미지 업로드\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesDone = false;\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["produce","initialValue","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","arguments","length","undefined","action","draft","post","find","v","id","PostId","Likers","push","UserId","error","filter","unshift","concat","Comments","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["import { produce } from \"immer\";\nexport const initialValue = {\n    mainPosts: [],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n\n    hasMorePost: true, //true면 가져올 시도를 해라. (스크롤 했을 때)\n\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n\n    likePostLoading: false,\n    likePostDone: false,\n    likePostError: null,\n\n    unlikePostLoading: false,\n    unlikePostDone: false,\n    unlikePostError: null,\n\n    uploadImagesLoading: false,\n    uploadImagesDone: false,\n    uploadImagesError: null,\n};\n//가짜 데이터\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) =>\n    produce(state, (draft) => {\n        switch (action.type) {\n            case LIKE_POST_REQUEST:\n                draft.likePostLoading = true;\n                draft.likePostDone = false;\n                draft.likePostError = null;\n                break;\n            case LIKE_POST_SUCCESS: {\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId\n                );\n                post.Likers.push({ id: action.data.UserId });\n                draft.likePostLoading = false;\n                draft.likePostDone = true;\n\n                break;\n            }\n            case LIKE_POST_FAILURE:\n                draft.likePostLoading = false;\n                draft.likePostError = action.error;\n                break;\n\n            case UNLIKE_POST_REQUEST:\n                draft.unlikePostLoading = true;\n                draft.unlikePostDone = false;\n                draft.unlikePostError = null;\n                break;\n            case UNLIKE_POST_SUCCESS: {\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId\n                );\n                post.Likers = post.Likers.filter(\n                    (v) => v.id !== action.data.UserId\n                );\n                draft.unlikePostLoading = false;\n                draft.unlikePostDone = true;\n                break;\n            }\n\n            case UNLIKE_POST_FAILURE:\n                draft.unlikePostLoading = false;\n                draft.unlikePostError = action.error;\n                break;\n\n            //게시글 추가\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(action.data);\n                draft.imagePaths = [];\n                //unshift란 배열의 맨 앞에다가 추가하는 함수\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n\n            //게시글 불러오기\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                draft.mainPosts = action.data.concat(draft.mainPosts);\n                //concat은 두개 이상의 배열을 합칠 때 사용\n                //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n                draft.hasMorePost = draft.mainPosts.length < 50;\n                //50개보다 적으면 불러와야함\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = action.error;\n                break;\n\n            //댓글 추가\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n\n            case ADD_COMMENT_SUCCESS:\n                //immer버전 (너무 간단함)\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId //routes/post.js에서 PostId를 보내줌\n                ); //해당 게시글 찾기\n                post.Comments.unshift(action.data);\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                //댓글 넣어주기\n                break;\n\n            //immer를 안 쓴 부분\n            // const postIndex = state.mainPosts.findIndex(\n            //     (v) => v.id === action.data.postId\n            // );\n            // const post = { ...state.mainPosts[postIndex] };\n\n            // post.Comments = [\n            //     dummyComment(action.data.content),\n            //     ...post.Comments,\n            // ]; //얕은 복사\n\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n            // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n\n            //게시글 삭제\n            case REMOVE_POST_REQUEST:\n                draft.removePostDone = false;\n                draft.removePostLoading = true;\n                draft.removePostError = null;\n                break;\n\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter(\n                    (v) => v.id !== action.data.PostId\n                );\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n\n            //이미지 업로드\n            case UPLOAD_IMAGES_REQUEST:\n                draft.uploadImagesDone = false;\n                draft.uploadImagesLoading = true;\n                draft.uploadImagesError = null;\n                break;\n\n            case UPLOAD_IMAGES_SUCCESS:\n                draft.uploadImagesLoading = false;\n                draft.uploadImagesDone = true;\n                draft.mainPosts = draft.mainPosts.filter(\n                    (v) => v.id !== action.data.PostId\n                );\n                break;\n            case UPLOAD_IMAGES_FAILURE:\n                draft.uploadImagesLoading = false;\n                draft.uploadImagesError = action.error;\n                break;\n            default:\n                break;\n        }\n    });\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}