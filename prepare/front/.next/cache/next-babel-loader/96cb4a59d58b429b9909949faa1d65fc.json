{"ast":null,"code":"import { all, delay, fork, put } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n//게시글 작성\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n//게시글 삭제\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","axios","post","addPost","action","id","generate","type","data","content","err","response","watchAddPost","addCommentAPI","postId","addComment","watchAddComment","removePostAPI","removePost","watchRemovePost","postSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport {\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_REQUEST,\n} from \"../reducers/post\";\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n//게시글 작성\nfunction addPostAPI() {\n    return axios.post(\"/api/post\");\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        const id = shortId.generate();\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({ type: ADD_POST_TO_ME, data: id });\n    } catch (err) {\n        put({ type: ADD_POST_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: ADD_COMMENT_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: ADD_COMMENT_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n//게시글 삭제\nfunction removePostAPI() {\n    return axios.post(\"/api/post\");\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        const id = shortId.generate();\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({ type: REMOVE_POST_OF_ME, data: action.data });\n    } catch (err) {\n        put({ type: REMOVE_POST_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n    ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}