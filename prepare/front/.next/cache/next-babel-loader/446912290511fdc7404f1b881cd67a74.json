{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport shortId from \"shortid\";\nexport var initialValue = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"이현철\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n//가짜 데이터\n\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"이현철\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"이현철\"\n    }\n  };\n};\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialValue;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    //게시글 추가\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    //댓글 추가\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n    case ADD_COMMENT_SUCCESS:\n      var postIndex = state.mainPosts.findIndex(function (v) {\n        return v.id === action.data.postId;\n      });\n      var post = _objectSpread({}, state.mainPosts[postIndex]);\n      post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments)); //얕은 복사\n\n      var mainPosts = _toConsumableArray(state.mainPosts);\n      mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n      //불변성을 지키다 보니 가독성이 너무 안좋음\n      //\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    //게시글 삭제\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: state.mainPosts.filter(function (v) {\n          return v.id === action.data;\n        }),\n        removePostLoading: false,\n        removePostDone: true\n      });\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["shortId","initialValue","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","arguments","length","undefined","action","_objectSpread","concat","_toConsumableArray","error","postIndex","findIndex","v","postId","post","filter"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\n\nexport const initialValue = {\n    mainPosts: [\n        {\n            id: 1,\n            User: {\n                id: 1,\n                nickname: \"이현철\",\n            },\n            content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n            Images: [\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n            ],\n            Comments: [\n                {\n                    id: shortId.generate(),\n                    User: {\n                        id: shortId.generate(),\n                        nickname: \"nero\",\n                    },\n                    content: \"우와 개정판이 나왔군요~\",\n                },\n                {\n                    id: shortId.generate(),\n                    User: {\n                        id: shortId.generate(),\n                        nickname: \"hero\",\n                    },\n                    content: \"얼른 사고싶어요~\",\n                },\n            ],\n        },\n    ],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n//가짜 데이터\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n});\n\nconst reducer = (state = initialValue, action) => {\n    switch (action.type) {\n        //게시글 추가\n        case ADD_POST_REQUEST:\n            return {\n                ...state,\n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: null,\n            };\n\n        case ADD_POST_SUCCESS:\n            return {\n                ...state,\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                addPostLoading: false,\n                addPostDone: true,\n            };\n        case ADD_POST_FAILURE:\n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error,\n            };\n\n        //댓글 추가\n        case ADD_COMMENT_REQUEST:\n            return {\n                ...state,\n                addCommentLoading: true,\n                addCommentDone: false,\n                addCommentError: null,\n            };\n\n        case ADD_COMMENT_SUCCESS:\n            const postIndex = state.mainPosts.findIndex(\n                (v) => v.id === action.data.postId\n            );\n            const post = { ...state.mainPosts[postIndex] };\n\n            post.Comments = [\n                dummyComment(action.data.content),\n                ...post.Comments,\n            ]; //얕은 복사\n\n            const mainPosts = [...state.mainPosts];\n            mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n            //불변성을 지키다 보니 가독성이 너무 안좋음\n            //\n\n            return {\n                ...state,\n                mainPosts,\n                addCommentLoading: false,\n                addCommentDone: true,\n            };\n        case ADD_COMMENT_FAILURE:\n            return {\n                ...state,\n                addCommentLoading: false,\n                addCommentError: action.error,\n            };\n\n        //게시글 삭제\n        case REMOVE_POST_REQUEST:\n            return {\n                ...state,\n                removePostLoading: true,\n                removePostDone: false,\n                removePostError: null,\n            };\n\n        case REMOVE_POST_SUCCESS:\n            return {\n                ...state,\n                mainPosts: state.mainPosts.filter((v) => v.id === action.data),\n                removePostLoading: false,\n                removePostDone: true,\n            };\n        case REMOVE_POST_FAILURE:\n            return {\n                ...state,\n                removePostLoading: false,\n                removePostError: action.error,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}