{"ast":null,"code":"import { all, delay, fork, put } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\n//게시글 작성\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {}\n    });\n    yield put({\n      type: ADD_POST_TO_ME\n    });\n  } catch (err) {\n    put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_TO_ME","addPostAPI","axios","post","addPost","action","id","generate","type","data","err","response","watchAddPost","addCommentAPI","postId","addComment","watchAddComment","postSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport {\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n} from \"../reducers/post\";\n\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\n//게시글 작성\nfunction addPostAPI() {\n    return axios.post(\"/api/post\");\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        const id = shortId.generate();\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: ADD_POST_SUCCESS, data: {} });\n        yield put({ type: ADD_POST_TO_ME });\n    } catch (err) {\n        put({ type: ADD_POST_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: ADD_COMMENT_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: ADD_COMMENT_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n    yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC1D,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,OAAOC,OAAO,MAAM,SAAS;AAC7B,SACIC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QAChB,kBAAkB;AAEzB,SAASC,cAAc,QAAQ,kBAAkB;;AAEjD;AACA,SAASC,UAAUA,CAAA,EAAG;EAClB,OAAOC,KAAK,CAACC,IAAI,CAAC,WAAW,CAAC;AAClC;AAEA,UAAUC,OAAOA,CAACC,MAAM,EAAE;EACtB,IAAI;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMiB,EAAE,GAAGb,OAAO,CAACc,QAAQ,CAAC,CAAC;IAC7B;IACA,MAAMhB,GAAG,CAAC;MAAEiB,IAAI,EAAEZ,gBAAgB;MAAEa,IAAI,EAAE,CAAC;IAAE,CAAC,CAAC;IAC/C,MAAMlB,GAAG,CAAC;MAAEiB,IAAI,EAAER;IAAe,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOU,GAAG,EAAE;IACVnB,GAAG,CAAC;MAAEiB,IAAI,EAAEd,gBAAgB;MAAEe,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EAC5D;AACJ;AAEA,UAAUG,YAAYA,CAAA,EAAG;EACrB,MAAMpB,UAAU,CAACG,gBAAgB,EAAES,OAAO,CAAC;AAC/C;;AAEA;;AAEA,SAASS,aAAaA,CAACJ,IAAI,EAAE;EACzB,OAAOP,KAAK,CAACC,IAAI,CAAE,aAAYM,IAAI,CAACK,MAAO,UAAS,EAAEL,IAAI,CAAC;AAC/D;AAEA,UAAUM,UAAUA,CAACV,MAAM,EAAE;EACzB,IAAI;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAME,GAAG,CAAC;MAAEiB,IAAI,EAAET,mBAAmB;MAAEU,IAAI,EAAEJ,MAAM,CAACI;IAAK,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVnB,GAAG,CAAC;MAAEiB,IAAI,EAAEX,mBAAmB;MAAEY,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EAC/D;AACJ;AAEA,UAAUO,eAAeA,CAAA,EAAG;EACxB,MAAMxB,UAAU,CAACM,mBAAmB,EAAEiB,UAAU,CAAC;AACrD;AACA,eAAe,UAAUE,QAAQA,CAAA,EAAG;EAChC,MAAM7B,GAAG,CAAC,CAACE,IAAI,CAACsB,YAAY,CAAC,EAAEtB,IAAI,CAAC0B,eAAe,CAAC,CAAC,CAAC;AAC1D"},"metadata":{},"sourceType":"module"}