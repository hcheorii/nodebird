{"ast":null,"code":"import { all, fork, call, put, take, takeEvery, takeLatest, delay } from \"redux-saga/effects\"; //saga의 이펙트 //all은 fork, call을 한번에 실행해준다. //put을 디스패치라고 생각하면 마음이 편한다.\n//call과 Fork의 차이는 동기, 비동기 차이이다. call은 응답이 올때까지 대기.(일종의 브레이크)\nimport axios from \"axios\";\nfunction logInAPI() {\n  return axios.post(\"api/login\");\n}\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      //요청성공\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //요청실패\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"api/logout\");\n}\nfunction* logOut(action) {\n  try {\n    const result = yield call(logOutAPI, action.data);\n    yield put({\n      //요청성공\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //요청실패\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //요청성공\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //요청실패\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); //while대신에 takeEvery, 대신 TakeEvery로 하게 되면 마우스를 실수로\n  //두번누르거나 했을 때 진짜로 요청이 두번 가게된다. 그래서 takeLatest로 하면 마지막 꺼만 요청이간다.\n  //응답을 취소하는거지 요청을 취소하는 것은 아님\n  //throttle을 사용하여 시간을 정해주면 그 시간안에는 단 한번만 요청을 보낼 수 있다.\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\");\n}\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"names":["all","fork","call","put","take","takeEvery","takeLatest","delay","axios","logInAPI","post","logIn","action","result","data","type","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/index.js"],"sourcesContent":["import {\n    all,\n    fork,\n    call,\n    put,\n    take,\n    takeEvery,\n    takeLatest,\n    delay,\n} from \"redux-saga/effects\"; //saga의 이펙트 //all은 fork, call을 한번에 실행해준다. //put을 디스패치라고 생각하면 마음이 편한다.\n//call과 Fork의 차이는 동기, 비동기 차이이다. call은 응답이 올때까지 대기.(일종의 브레이크)\nimport axios from \"axios\";\nfunction logInAPI() {\n    return axios.post(\"api/login\");\n}\n\nfunction* logIn(action) {\n    try {\n        const result = yield call(logInAPI, action.data);\n        yield put({\n            //요청성공\n            type: \"LOG_IN_SUCCESS\",\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            //요청실패\n            type: \"LOG_IN_FAILURE\",\n            data: err.response.data,\n        });\n    }\n}\nfunction logOutAPI() {\n    return axios.post(\"api/logout\");\n}\n\nfunction* logOut(action) {\n    try {\n        const result = yield call(logOutAPI, action.data);\n        yield put({\n            //요청성공\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            //요청실패\n            type: \"LOG_OUT_FAILURE\",\n            data: err.response.data,\n        });\n    }\n}\n\nfunction addPostAPI(data) {\n    return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            //요청성공\n            type: \"ADD_POST_SUCCESS\",\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            //요청실패\n            type: \"ADD_POST_FAILURE\",\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn); //while대신에 takeEvery, 대신 TakeEvery로 하게 되면 마우스를 실수로\n    //두번누르거나 했을 때 진짜로 요청이 두번 가게된다. 그래서 takeLatest로 하면 마지막 꺼만 요청이간다.\n    //응답을 취소하는거지 요청을 취소하는 것은 아님\n    //throttle을 사용하여 시간을 정해주면 그 시간안에는 단 한번만 요청을 보낼 수 있다.\n}\nfunction* watchLogOut() {\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n    yield takeLatest(\"ADD_POST_REQUEST\");\n}\nexport default function* rootSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}\n"],"mappings":"AAAA,SACIA,GAAG,EACHC,IAAI,EACJC,IAAI,EACJC,GAAG,EACHC,IAAI,EACJC,SAAS,EACTC,UAAU,EACVC,KAAK,QACF,oBAAoB,CAAC,CAAC;AAC7B;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQA,CAAA,EAAG;EAChB,OAAOD,KAAK,CAACE,IAAI,CAAC,WAAW,CAAC;AAClC;AAEA,UAAUC,KAAKA,CAACC,MAAM,EAAE;EACpB,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMX,IAAI,CAACO,QAAQ,EAAEG,MAAM,CAACE,IAAI,CAAC;IAChD,MAAMX,GAAG,CAAC;MACN;MACAY,IAAI,EAAE,gBAAgB;MACtBD,IAAI,EAAED,MAAM,CAACC;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOE,GAAG,EAAE;IACV,MAAMb,GAAG,CAAC;MACN;MACAY,IAAI,EAAE,gBAAgB;MACtBD,IAAI,EAAEE,GAAG,CAACC,QAAQ,CAACH;IACvB,CAAC,CAAC;EACN;AACJ;AACA,SAASI,SAASA,CAAA,EAAG;EACjB,OAAOV,KAAK,CAACE,IAAI,CAAC,YAAY,CAAC;AACnC;AAEA,UAAUS,MAAMA,CAACP,MAAM,EAAE;EACrB,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMX,IAAI,CAACgB,SAAS,EAAEN,MAAM,CAACE,IAAI,CAAC;IACjD,MAAMX,GAAG,CAAC;MACN;MACAY,IAAI,EAAE,iBAAiB;MACvBD,IAAI,EAAED,MAAM,CAACC;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOE,GAAG,EAAE;IACV,MAAMb,GAAG,CAAC;MACN;MACAY,IAAI,EAAE,iBAAiB;MACvBD,IAAI,EAAEE,GAAG,CAACC,QAAQ,CAACH;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASM,UAAUA,CAACN,IAAI,EAAE;EACtB,OAAON,KAAK,CAACE,IAAI,CAAC,WAAW,EAAEI,IAAI,CAAC;AACxC;AAEA,UAAUO,OAAOA,CAACT,MAAM,EAAE;EACtB,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMX,IAAI,CAACkB,UAAU,EAAER,MAAM,CAACE,IAAI,CAAC;IAClD,MAAMX,GAAG,CAAC;MACN;MACAY,IAAI,EAAE,kBAAkB;MACxBD,IAAI,EAAED,MAAM,CAACC;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOE,GAAG,EAAE;IACV,MAAMb,GAAG,CAAC;MACN;MACAY,IAAI,EAAE,kBAAkB;MACxBD,IAAI,EAAEE,GAAG,CAACC,QAAQ,CAACH;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,UAAUQ,UAAUA,CAAA,EAAG;EACnB,MAAMhB,UAAU,CAAC,gBAAgB,EAAEK,KAAK,CAAC,CAAC,CAAC;EAC3C;EACA;EACA;AACJ;;AACA,UAAUY,WAAWA,CAAA,EAAG;EACpB,MAAMjB,UAAU,CAAC,iBAAiB,EAAEa,MAAM,CAAC;AAC/C;AACA,UAAUK,YAAYA,CAAA,EAAG;EACrB,MAAMlB,UAAU,CAAC,kBAAkB,CAAC;AACxC;AACA,eAAe,UAAUmB,QAAQA,CAAA,EAAG;EAChC,MAAMzB,GAAG,CAAC,CAACC,IAAI,CAACqB,UAAU,CAAC,EAAErB,IAAI,CAACsB,WAAW,CAAC,EAAEtB,IAAI,CAACuB,YAAY,CAAC,CAAC,CAAC;AACxE"},"metadata":{},"sourceType":"module"}