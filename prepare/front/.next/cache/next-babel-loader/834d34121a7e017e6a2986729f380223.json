{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, CHANGE_NICKNAME_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\";\n\n//유저정보 가져오기\nfunction loadUserAPI(data) {\n  //실제로 서버에 요청을 보내는 부분\n  return axios.get(\"/user\");\n}\nfunction* loadUser(action) {\n  //LOG_IN_REQUEST액션이 디스패치되었을 때 호출 되는 제네레이터 함수.\n  try {\n    const result = yield call(loadUserAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    console.log(result);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    }); //성공하면 로그인 정보 데이터를 Redux에 저장.\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    }); //실패하면 에러 데이터를 Redux에 저장.\n  }\n}\n\n// 로그인\nfunction logInAPI(data) {\n  //실제로 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", data);\n}\nfunction* logIn(action) {\n  //LOG_IN_REQUEST액션이 디스패치되었을 때 호출 되는 제네레이터 함수.\n  try {\n    const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    console.log(result);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    }); //성공하면 로그인 정보 데이터를 Redux에 저장.\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    }); //실패하면 에러 데이터를 Redux에 저장.\n  }\n}\n\n//로그아웃\n\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\");\n}\nfunction* logOut() {\n  try {\n    yield call(logOutAPI); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//회원가입\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data); //백엔드 서버 주소\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n    console.log(err);\n  }\n}\n\n//팔로우\nfunction followAPI() {\n  return axios(\"/api/signup\");\n}\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(signUpAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//언팔로우\nfunction unfollowAPI() {\n  return axios(\"/api/signup\");\n}\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(signUpAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  //액션을 감시하고 필요한 작업을 수행하는데에 사용.\n  //이벤트 리스터 같은 역할.\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이라는 액션이 실행되면, logIn함수를 실행시킨다.\n\n  //take는 일회용이다. takeEvery는 계속 받을 수 있다. 하지만 여러번 입력을 한번에 하게되면 그 여러개 요청이 모두 가기 때문에\n  //takeLatest를 사용한다.\n  //완료되지 않은 것들 중에서 로딩중인것들을 중단. 응답을 취소.\n  //throttle은 초를 정해서 그 안에서는 요청은 한번만 할 수 있게 설정할 수 있다.\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\nexport default function* userSaga() {\n  yield all([fork(watchChangeNickname), fork(watchLoadUser), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnollow)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","delay","put","call","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","CHANGE_NICKNAME_REQUEST","axios","loadUserAPI","data","get","loadUser","action","result","console","log","type","err","error","response","logInAPI","post","logIn","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","unfollow","watchLogIn","watchLoadUser","watchLogOut","watchSignUp","watchFollow","watchUnollow","watchChangeNickname","changeNickname","userSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, delay, put, call } from \"redux-saga/effects\";\n\nimport {\n    LOG_IN_SUCCESS,\n    LOG_IN_REQUEST,\n    LOG_IN_FAILURE,\n    LOAD_MY_INFO_REQUEST,\n    LOAD_MY_INFO_SUCCESS,\n    LOAD_MY_INFO_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    LOG_OUT_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n    SIGN_UP_FAILURE,\n    FOLLOW_FAILURE,\n    FOLLOW_REQUEST,\n    FOLLOW_SUCCESS,\n    UNFOLLOW_FAILURE,\n    UNFOLLOW_REQUEST,\n    UNFOLLOW_SUCCESS,\n    CHANGE_NICKNAME_REQUEST,\n} from \"../reducers/user\";\nimport axios from \"axios\";\n\n//유저정보 가져오기\nfunction loadUserAPI(data) {\n    //실제로 서버에 요청을 보내는 부분\n    return axios.get(\"/user\");\n}\n\nfunction* loadUser(action) {\n    //LOG_IN_REQUEST액션이 디스패치되었을 때 호출 되는 제네레이터 함수.\n    try {\n        const result = yield call(loadUserAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        console.log(result);\n        yield put({ type: LOAD_MY_INFO_SUCCESS, data: result.data }); //성공하면 로그인 정보 데이터를 Redux에 저장.\n    } catch (err) {\n        console.log(err);\n        yield put({ type: LOAD_MY_INFO_FAILURE, error: err.response.data }); //실패하면 에러 데이터를 Redux에 저장.\n    }\n}\n\n// 로그인\nfunction logInAPI(data) {\n    //실제로 서버에 요청을 보내는 부분\n    return axios.post(\"/user/login\", data);\n}\n\nfunction* logIn(action) {\n    //LOG_IN_REQUEST액션이 디스패치되었을 때 호출 되는 제네레이터 함수.\n    try {\n        const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        console.log(result);\n        yield put({ type: LOG_IN_SUCCESS, data: result.data }); //성공하면 로그인 정보 데이터를 Redux에 저장.\n    } catch (err) {\n        console.log(err);\n        yield put({ type: LOG_IN_FAILURE, error: err.response.data }); //실패하면 에러 데이터를 Redux에 저장.\n    }\n}\n\n//로그아웃\n\nfunction logOutAPI() {\n    return axios.post(\"/user/logout\");\n}\n\nfunction* logOut() {\n    try {\n        yield call(logOutAPI); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: LOG_OUT_SUCCESS });\n    } catch (err) {\n        put({ type: LOG_OUT_FAILURE, error: err.response.data });\n    }\n}\n\n//회원가입\n\nfunction signUpAPI(data) {\n    return axios.post(\"/user\", data); //백엔드 서버 주소\n}\n\nfunction* signUp(action) {\n    try {\n        const result = yield call(signUpAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        console.log(result);\n        yield put({ type: SIGN_UP_SUCCESS, data: action.data });\n    } catch (err) {\n        yield put({ type: SIGN_UP_FAILURE, error: err.response.data });\n        console.log(err);\n    }\n}\n\n//팔로우\nfunction followAPI() {\n    return axios(\"/api/signup\");\n}\n\nfunction* follow(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(signUpAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: FOLLOW_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: FOLLOW_FAILURE, error: err.response.data });\n    }\n}\n\n//언팔로우\nfunction unfollowAPI() {\n    return axios(\"/api/signup\");\n}\n\nfunction* unfollow(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(signUpAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: UNFOLLOW_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: UNFOLLOW_FAILURE, error: err.response.data });\n    }\n}\n\nfunction* watchLogIn() {\n    //액션을 감시하고 필요한 작업을 수행하는데에 사용.\n    //이벤트 리스터 같은 역할.\n    yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이라는 액션이 실행되면, logIn함수를 실행시킨다.\n\n    //take는 일회용이다. takeEvery는 계속 받을 수 있다. 하지만 여러번 입력을 한번에 하게되면 그 여러개 요청이 모두 가기 때문에\n    //takeLatest를 사용한다.\n    //완료되지 않은 것들 중에서 로딩중인것들을 중단. 응답을 취소.\n    //throttle은 초를 정해서 그 안에서는 요청은 한번만 할 수 있게 설정할 수 있다.\n}\n\nfunction* watchLoadUser() {\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* watchFollow() {\n    yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnollow() {\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\nfunction* watchChangeNickname() {\n    yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\nexport default function* userSaga() {\n    yield all([\n        fork(watchChangeNickname),\n        fork(watchLoadUser),\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchSignUp),\n        fork(watchFollow),\n        fork(watchUnollow),\n    ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}