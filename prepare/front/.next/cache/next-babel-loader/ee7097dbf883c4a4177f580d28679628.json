{"ast":null,"code":"import { produce } from \"immer\";\nexport var initialValue = {\n  mainPosts: [],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  hasMorePost: true,\n  //true면 가져올 시도를 해라. (스크롤 했을 때)\n\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\n//가짜 데이터\nexport var UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport var UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport var UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport var LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport var LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport var LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport var UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport var UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport var UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport var RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport var RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport var REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialValue;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post2.Likers = _post2.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      //게시글 추가\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        //unshift란 배열의 맨 앞에다가 추가하는 함수\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //게시글 불러오기\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        //concat은 두개 이상의 배열을 합칠 때 사용\n        //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n        draft.hasMorePost = action.data.length === 10;\n        //50개보다 적으면 불러와야함\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      //댓글 추가\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //immer버전 (너무 간단함)\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        } //routes/post.js에서 PostId를 보내줌\n        ); //해당 게시글 찾기\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        //댓글 넣어주기\n        break;\n\n      //immer를 안 쓴 부분\n      // const postIndex = state.mainPosts.findIndex(\n      //     (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n\n      // post.Comments = [\n      //     dummyComment(action.data.content),\n      //     ...post.Comments,\n      // ]; //얕은 복사\n\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n      // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n      // return {\n      //     ...state,\n      //     mainPosts,\n      //     addCommentLoading: false,\n      //     addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      //게시글 삭제\n      case REMOVE_POST_REQUEST:\n        draft.removePostDone = false;\n        draft.removePostLoading = true;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      //이미지 업로드\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesDone = false;\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        draft.imagePaths = action.data;\n        break;\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      //리트윗\n      case RETWEET_REQUEST:\n        draft.retweetDone = false;\n        draft.retweetLoading = true;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS:\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["produce","initialValue","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","arguments","length","undefined","action","draft","filter","v","i","post","find","id","PostId","Likers","push","UserId","error","unshift","concat","Comments"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["import { produce } from \"immer\";\nexport const initialValue = {\n    mainPosts: [],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n\n    hasMorePost: true, //true면 가져올 시도를 해라. (스크롤 했을 때)\n\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n\n    likePostLoading: false,\n    likePostDone: false,\n    likePostError: null,\n\n    unlikePostLoading: false,\n    unlikePostDone: false,\n    unlikePostError: null,\n\n    uploadImagesLoading: false,\n    uploadImagesDone: false,\n    uploadImagesError: null,\n\n    retweetLoading: false,\n    retweetDone: false,\n    retweetError: null,\n};\n//가짜 데이터\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) =>\n    produce(state, (draft) => {\n        switch (action.type) {\n            case REMOVE_IMAGE:\n                draft.imagePaths = draft.imagePaths.filter(\n                    (v, i) => i !== action.data\n                );\n                break;\n            case LIKE_POST_REQUEST:\n                draft.likePostLoading = true;\n                draft.likePostDone = false;\n                draft.likePostError = null;\n                break;\n            case LIKE_POST_SUCCESS: {\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId\n                );\n                post.Likers.push({ id: action.data.UserId });\n                draft.likePostLoading = false;\n                draft.likePostDone = true;\n\n                break;\n            }\n            case LIKE_POST_FAILURE:\n                draft.likePostLoading = false;\n                draft.likePostError = action.error;\n                break;\n\n            case UNLIKE_POST_REQUEST:\n                draft.unlikePostLoading = true;\n                draft.unlikePostDone = false;\n                draft.unlikePostError = null;\n                break;\n            case UNLIKE_POST_SUCCESS: {\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId\n                );\n                post.Likers = post.Likers.filter(\n                    (v) => v.id !== action.data.UserId\n                );\n                draft.unlikePostLoading = false;\n                draft.unlikePostDone = true;\n                break;\n            }\n\n            case UNLIKE_POST_FAILURE:\n                draft.unlikePostLoading = false;\n                draft.unlikePostError = action.error;\n                break;\n\n            //게시글 추가\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(action.data);\n                draft.imagePaths = [];\n                //unshift란 배열의 맨 앞에다가 추가하는 함수\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n\n            //게시글 불러오기\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                draft.mainPosts = action.data.concat(draft.mainPosts);\n                //concat은 두개 이상의 배열을 합칠 때 사용\n                //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n                draft.hasMorePost = action.data.length === 10;\n                //50개보다 적으면 불러와야함\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = action.error;\n                break;\n\n            //댓글 추가\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n\n            case ADD_COMMENT_SUCCESS:\n                //immer버전 (너무 간단함)\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId //routes/post.js에서 PostId를 보내줌\n                ); //해당 게시글 찾기\n                post.Comments.unshift(action.data);\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                //댓글 넣어주기\n                break;\n\n            //immer를 안 쓴 부분\n            // const postIndex = state.mainPosts.findIndex(\n            //     (v) => v.id === action.data.postId\n            // );\n            // const post = { ...state.mainPosts[postIndex] };\n\n            // post.Comments = [\n            //     dummyComment(action.data.content),\n            //     ...post.Comments,\n            // ]; //얕은 복사\n\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n            // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n\n            //게시글 삭제\n            case REMOVE_POST_REQUEST:\n                draft.removePostDone = false;\n                draft.removePostLoading = true;\n                draft.removePostError = null;\n                break;\n\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter(\n                    (v) => v.id !== action.data.PostId\n                );\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n\n            //이미지 업로드\n            case UPLOAD_IMAGES_REQUEST:\n                draft.uploadImagesDone = false;\n                draft.uploadImagesLoading = true;\n                draft.uploadImagesError = null;\n                break;\n\n            case UPLOAD_IMAGES_SUCCESS:\n                draft.uploadImagesLoading = false;\n                draft.uploadImagesDone = true;\n                draft.imagePaths = action.data;\n                break;\n            case UPLOAD_IMAGES_FAILURE:\n                draft.uploadImagesLoading = false;\n                draft.uploadImagesError = action.error;\n                break;\n\n            //리트윗\n            case RETWEET_REQUEST:\n                draft.retweetDone = false;\n                draft.retweetLoading = true;\n                draft.retweetError = null;\n                break;\n\n            case RETWEET_SUCCESS:\n                draft.retweetLoading = false;\n                draft.retweetDone = true;\n                draft.mainPosts.unshift(action.data);\n                break;\n            case RETWEET_FAILURE:\n                draft.retweetLoading = false;\n                draft.retweetError = action.error;\n                break;\n\n            default:\n                break;\n        }\n    });\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}