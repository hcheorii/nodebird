{"ast":null,"code":"import shortId from \"shortid\";\nimport { produce } from \"immer\";\nimport faker from \"faker\";\nexport const initialValue = {\n  mainPosts: [],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  hasMorePost: true,\n  //true면 가져올 시도를 해라.\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n//가짜 데이터\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  //아무 문장,\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\n//concat은 두개 이상의 배열을 합칠 때 사용\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"이현철\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"이현철\"\n  }\n});\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      //게시글 추가\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        //unshift란 배열의 맨 앞에다가 추가하는 함수\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //게시글 불러오기\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        //50개보다 적으면 has\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      //댓글 추가\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //immer버전 (너무 간단함)\n        const post = draft.mainPosts.find(v => v.id === action.data.postId); //해당 게시글 찾기\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        //댓글 넣어주기\n        break;\n\n      //immer를 안 쓴 부분\n      // const postIndex = state.mainPosts.findIndex(\n      //     (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n\n      // post.Comments = [\n      //     dummyComment(action.data.content),\n      //     ...post.Comments,\n      // ]; //얕은 복사\n\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n      // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n      // return {\n      //     ...state,\n      //     mainPosts,\n      //     addCommentLoading: false,\n      //     addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      //게시글 삭제\n      case REMOVE_POST_REQUEST:\n        draft.removePostDone = false;\n        draft.removePostLoading = true;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialValue","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","concat","length","post","find","v","postId","filter"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\nimport { produce } from \"immer\";\nimport faker from \"faker\";\nexport const initialValue = {\n    mainPosts: [],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n\n    hasMorePost: true, //true면 가져올 시도를 해라.\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n//가짜 데이터\n\nexport const generateDummyPost = (number) =>\n    Array(number)\n        .fill()\n        .map(() => ({\n            id: shortId.generate(),\n            User: {\n                id: shortId.generate(),\n                nickname: faker.name.findName(),\n            },\n            content: faker.lorem.paragraph(), //아무 문장,\n            Images: [\n                {\n                    src: faker.image.image(),\n                },\n            ],\n            Comments: [\n                {\n                    User: {\n                        id: shortId.generate(),\n                        nickname: faker.name.findName(),\n                    },\n                    content: faker.lorem.sentence(),\n                },\n            ],\n        }));\n//concat은 두개 이상의 배열을 합칠 때 사용\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n});\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            //게시글 추가\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(dummyPost(action.data));\n                //unshift란 배열의 맨 앞에다가 추가하는 함수\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n\n            //게시글 불러오기\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                draft.mainPosts = action.data.concat(draft.mainPosts);\n                //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n                draft.hasMorePost = draft.mainPosts.length < 50;\n                //50개보다 적으면 has\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = action.error;\n                break;\n\n            //댓글 추가\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n\n            case ADD_COMMENT_SUCCESS:\n                //immer버전 (너무 간단함)\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.postId\n                ); //해당 게시글 찾기\n                post.Comments.unshift(dummyComment(action.data.content));\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                //댓글 넣어주기\n                break;\n\n            //immer를 안 쓴 부분\n            // const postIndex = state.mainPosts.findIndex(\n            //     (v) => v.id === action.data.postId\n            // );\n            // const post = { ...state.mainPosts[postIndex] };\n\n            // post.Comments = [\n            //     dummyComment(action.data.content),\n            //     ...post.Comments,\n            // ]; //얕은 복사\n\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n            // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n\n            //게시글 삭제\n            case REMOVE_POST_REQUEST:\n                draft.removePostDone = false;\n                draft.removePostLoading = true;\n                draft.removePostError = null;\n                break;\n\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter(\n                    (v) => v.id !== action.data\n                );\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n            default:\n                break;\n        }\n    });\n};\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}