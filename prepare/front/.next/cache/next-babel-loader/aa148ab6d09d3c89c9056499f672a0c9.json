{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport shortId from \"shortid\";\nexport const initialValue = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"이현철\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n//가짜 데이터\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"이현철\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"이현철\"\n  }\n});\nconst reducer = (state = initialValue, action) => {\n  switch (action.type) {\n    //게시글 추가\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    //댓글 추가\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n      const post = _objectSpread({}, state.mainPosts[postIndex]);\n      post.Comments = [dummyComment(action.data.content), ...post.Comments]; //얕은 복사\n\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n      //불변성을 지키다 보니 가독성이 너무 안좋음\n      //\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        removePostLoading: false,\n        removePostDone: true\n      });\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["shortId","initialValue","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","_objectSpread","error","postIndex","findIndex","v","postId","post"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\n\nexport const initialValue = {\n    mainPosts: [\n        {\n            id: 1,\n            User: {\n                id: 1,\n                nickname: \"이현철\",\n            },\n            content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n            Images: [\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n            ],\n            Comments: [\n                {\n                    id: shortId.generate(),\n                    User: {\n                        id: shortId.generate(),\n                        nickname: \"nero\",\n                    },\n                    content: \"우와 개정판이 나왔군요~\",\n                },\n                {\n                    id: shortId.generate(),\n                    User: {\n                        id: shortId.generate(),\n                        nickname: \"hero\",\n                    },\n                    content: \"얼른 사고싶어요~\",\n                },\n            ],\n        },\n    ],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n//가짜 데이터\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n});\n\nconst reducer = (state = initialValue, action) => {\n    switch (action.type) {\n        //게시글 추가\n        case ADD_POST_REQUEST:\n            return {\n                ...state,\n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: null,\n            };\n\n        case ADD_POST_SUCCESS:\n            return {\n                ...state,\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                addPostLoading: false,\n                addPostDone: true,\n            };\n        case ADD_POST_FAILURE:\n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error,\n            };\n\n        //댓글 추가\n        case ADD_COMMENT_REQUEST:\n            return {\n                ...state,\n                addCommentLoading: true,\n                addCommentDone: false,\n                addCommentError: null,\n            };\n\n        case ADD_COMMENT_SUCCESS:\n            const postIndex = state.mainPosts.findIndex(\n                (v) => v.id === action.data.postId\n            );\n            const post = { ...state.mainPosts[postIndex] };\n\n            post.Comments = [\n                dummyComment(action.data.content),\n                ...post.Comments,\n            ]; //얕은 복사\n\n            const mainPosts = [...state.mainPosts];\n            mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n            //불변성을 지키다 보니 가독성이 너무 안좋음\n            //\n\n            return {\n                ...state,\n                mainPosts,\n                addCommentLoading: false,\n                addCommentDone: true,\n            };\n        case ADD_COMMENT_FAILURE:\n            return {\n                ...state,\n                addCommentLoading: false,\n                addCommentError: action.error,\n            };\n\n        case REMOVE_POST_REQUEST:\n            return {\n                ...state,\n                removePostLoading: true,\n                removePostDone: false,\n                removePostError: null,\n            };\n\n        case REMOVE_POST_SUCCESS:\n            return {\n                ...state,\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                removePostLoading: false,\n                removePostDone: true,\n            };\n        case REMOVE_POST_FAILURE:\n            return {\n                ...state,\n                removePostLoading: false,\n                removePostError: action.error,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}