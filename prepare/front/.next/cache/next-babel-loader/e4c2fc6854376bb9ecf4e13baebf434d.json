{"ast":null,"code":"import { all, fork } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\nfunction logInAPI(data) {\n  //실제로 서버에 요청을 보내는 부분\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  //LOG_IN_REQUEST액션이 디스패치되었을 때 호출 되는 제네레이터 함수.\n  try {\n    yield delay(1000);\n    // const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    }); //성공하면 로그인 정보 데이터를 Redux에 저장.\n  } catch (err) {\n    put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    }); //실패하면 에러 데이터를 Redux에 저장.\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    // const result = yield call(logOutAPI); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signUpAPI() {\n  return axios(\"/api/signup\");\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* signUp(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(signUpAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  //액션을 감시하고 필요한 작업을 수행하는데에 사용.\n  //이벤트 리스터 같은 역할.\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이라는 액션이 실행되면, logIn함수를 실행시킨다.\n\n  //take는 일회용이다. takeEvery는 계속 받을 수 있다. 하지만 여러번 입력을 한번에 하게되면 그 여러개 요청이 모두 가기 때문에\n  //takeLatest를 사용한다.\n  //완료되지 않은 것들 중에서 로딩중인것들을 중단. 응답을 취소.\n  //throttle은 초를 정해서 그 안에서는 요청은 한번만 할 수 있게 설정할 수 있다.\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","fork","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","axios","post","logIn","action","delay","put","type","err","error","response","watchLogOut","takeLatest","logOut","logOutAPI","result","signUpAPI","watchSignUp","signUp","watchLogIn","userSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/user.js"],"sourcesContent":["import { all, fork } from \"redux-saga/effects\";\n\nimport {\n    LOG_IN_SUCCESS,\n    LOG_IN_REQUEST,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    LOG_OUT_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n    SIGN_UP_FAILURE,\n} from \"../reducers/user\";\n\nfunction logInAPI(data) {\n    //실제로 서버에 요청을 보내는 부분\n    return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n    //LOG_IN_REQUEST액션이 디스패치되었을 때 호출 되는 제네레이터 함수.\n    try {\n        yield delay(1000);\n        // const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: LOG_IN_SUCCESS, data: action.data }); //성공하면 로그인 정보 데이터를 Redux에 저장.\n    } catch (err) {\n        put({ type: LOG_IN_FAILURE, error: err.response.data }); //실패하면 에러 데이터를 Redux에 저장.\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n    try {\n        yield delay(1000);\n        // const result = yield call(logOutAPI); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: LOG_OUT_SUCCESS, data: result.data });\n    } catch (err) {\n        put({ type: LOG_OUT_FAILURE, error: err.response.data });\n    }\n}\n\nfunction signUpAPI() {\n    return axios(\"/api/signup\");\n}\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* signUp(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(signUpAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: SIGN_UP_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: SIGN_UP_FAILURE, error: err.response.data });\n    }\n}\n\nfunction* watchLogIn() {\n    //액션을 감시하고 필요한 작업을 수행하는데에 사용.\n    //이벤트 리스터 같은 역할.\n    yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이라는 액션이 실행되면, logIn함수를 실행시킨다.\n\n    //take는 일회용이다. takeEvery는 계속 받을 수 있다. 하지만 여러번 입력을 한번에 하게되면 그 여러개 요청이 모두 가기 때문에\n    //takeLatest를 사용한다.\n    //완료되지 않은 것들 중에서 로딩중인것들을 중단. 응답을 취소.\n    //throttle은 초를 정해서 그 안에서는 요청은 한번만 할 수 있게 설정할 수 있다.\n}\n\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;AAE9C,SACIC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,QACZ,kBAAkB;AAEzB,SAASC,QAAQA,CAACC,IAAI,EAAE;EACpB;EACA,OAAOC,KAAK,CAACC,IAAI,CAAC,YAAY,EAAEF,IAAI,CAAC;AACzC;AAEA,UAAUG,KAAKA,CAACC,MAAM,EAAE;EACpB;EACA,IAAI;IACA,MAAMC,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMC,GAAG,CAAC;MAAEC,IAAI,EAAEjB,cAAc;MAAEU,IAAI,EAAEI,MAAM,CAACJ;IAAK,CAAC,CAAC,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACVF,GAAG,CAAC;MAAEC,IAAI,EAAEf,cAAc;MAAEiB,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACV;IAAK,CAAC,CAAC,CAAC,CAAC;EAC7D;AACJ;;AAEA,UAAUW,WAAWA,CAAA,EAAG;EACpB,MAAMC,UAAU,CAACnB,eAAe,EAAEoB,MAAM,CAAC;AAC7C;AAEA,SAASC,SAASA,CAAA,EAAG;EACjB,OAAOb,KAAK,CAACC,IAAI,CAAC,aAAa,CAAC;AACpC;AAEA,UAAUW,MAAMA,CAAA,EAAG;EACf,IAAI;IACA,MAAMR,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMC,GAAG,CAAC;MAAEC,IAAI,EAAEb,eAAe;MAAEM,IAAI,EAAEe,MAAM,CAACf;IAAK,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACVF,GAAG,CAAC;MAAEC,IAAI,EAAEZ,eAAe;MAAEc,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACV;IAAK,CAAC,CAAC;EAC5D;AACJ;AAEA,SAASgB,SAASA,CAAA,EAAG;EACjB,OAAOf,KAAK,CAAC,aAAa,CAAC;AAC/B;AACA,UAAUgB,WAAWA,CAAA,EAAG;EACpB,MAAML,UAAU,CAAChB,eAAe,EAAEsB,MAAM,CAAC;AAC7C;AACA,UAAUA,MAAMA,CAACd,MAAM,EAAE;EACrB,IAAI;IACA,MAAMC,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMC,GAAG,CAAC;MAAEC,IAAI,EAAEV,eAAe;MAAEG,IAAI,EAAEI,MAAM,CAACJ;IAAK,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACVF,GAAG,CAAC;MAAEC,IAAI,EAAET,eAAe;MAAEW,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACV;IAAK,CAAC,CAAC;EAC5D;AACJ;AAEA,UAAUmB,UAAUA,CAAA,EAAG;EACnB;EACA;EACA,MAAMP,UAAU,CAACrB,cAAc,EAAEY,KAAK,CAAC,CAAC,CAAC;;EAEzC;EACA;EACA;EACA;AACJ;;AAEA,eAAe,UAAUiB,QAAQA,CAAA,EAAG;EAChC,MAAMhC,GAAG,CAAC,CAACC,IAAI,CAAC8B,UAAU,CAAC,EAAE9B,IAAI,CAACsB,WAAW,CAAC,EAAEtB,IAAI,CAAC4B,WAAW,CAAC,CAAC,CAAC;AACvE"},"metadata":{},"sourceType":"module"}