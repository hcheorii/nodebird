{"ast":null,"code":"import shortId from \"shortid\";\nimport { produce } from \"immer\";\nimport { faker } from \"faker\";\nexport var initialValue = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"이현철\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\",\n        sss: sss\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n//가짜 데이터\n\ninitialState.mainPosts.concat(Array(20).fill().map(function (v, i) {}));\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"이현철\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"이현철\"\n    }\n  };\n};\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialValue;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      //게시글 추가\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        //unshift란 배열의 맨 앞에다가 추가하는 함수\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //댓글 추가\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        //immer버전 (너무 간단함)\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        }); //해당 게시글 찾기\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        //댓글 넣어주기\n        break;\n\n      //immer를 안 쓴 부분\n      // const postIndex = state.mainPosts.findIndex(\n      //     (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n\n      // post.Comments = [\n      //     dummyComment(action.data.content),\n      //     ...post.Comments,\n      // ]; //얕은 복사\n\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n      // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n      // return {\n      //     ...state,\n      //     mainPosts,\n      //     addCommentLoading: false,\n      //     addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      //게시글 삭제\n      case REMOVE_POST_REQUEST:\n        draft.removePostDone = false;\n        draft.removePostLoading = true;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialValue","mainPosts","id","User","nickname","content","Images","generate","src","Comments","sss","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","initialState","concat","Array","fill","map","v","i","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","arguments","length","undefined","action","draft","unshift","error","post","find","postId","filter"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\nimport { produce } from \"immer\";\nimport { faker } from \"faker\";\n\nexport const initialValue = {\n    mainPosts: [\n        {\n            id: 1,\n            User: {\n                id: 1,\n                nickname: \"이현철\",\n            },\n            content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n            Images: [\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n                {\n                    id: shortId.generate(),\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n            ],\n            Comments: [\n                {\n                    id: shortId.generate(),\n                    User: {\n                        id: shortId.generate(),\n                        nickname: \"nero\",\n                        sss,\n                    },\n                    content: \"우와 개정판이 나왔군요~\",\n                },\n                {\n                    id: shortId.generate(),\n                    User: {\n                        id: shortId.generate(),\n                        nickname: \"hero\",\n                    },\n                    content: \"얼른 사고싶어요~\",\n                },\n            ],\n        },\n    ],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n//가짜 데이터\n\ninitialState.mainPosts.concat(\n    Array(20)\n        .fill()\n        .map((v, i) => {})\n);\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n});\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            //게시글 추가\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(dummyPost(action.data));\n                //unshift란 배열의 맨 앞에다가 추가하는 함수\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n\n            //댓글 추가\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n\n            case ADD_COMMENT_SUCCESS:\n                //immer버전 (너무 간단함)\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.postId\n                ); //해당 게시글 찾기\n                post.Comments.unshift(dummyComment(action.data.content));\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                //댓글 넣어주기\n                break;\n\n            //immer를 안 쓴 부분\n            // const postIndex = state.mainPosts.findIndex(\n            //     (v) => v.id === action.data.postId\n            // );\n            // const post = { ...state.mainPosts[postIndex] };\n\n            // post.Comments = [\n            //     dummyComment(action.data.content),\n            //     ...post.Comments,\n            // ]; //얕은 복사\n\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n            // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n\n            //게시글 삭제\n            case REMOVE_POST_REQUEST:\n                draft.removePostDone = false;\n                draft.removePostLoading = true;\n                draft.removePostError = null;\n                break;\n\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter(\n                    (v) => v.id !== action.data\n                );\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n            default:\n                break;\n        }\n    });\n};\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}