{"ast":null,"code":"import { all, delay, fork, put } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport shortId, { generate } from \"shortid\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n//게시글 작성\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n//게시글 삭제\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction loadPostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost()\n    });\n  } catch (err) {\n    put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","shortId","generate","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","axios","post","addPost","action","id","type","data","content","err","response","watchAddPost","addCommentAPI","postId","addComment","watchAddComment","removePostAPI","removePost","watchLoadPosts","loadPosts","loadPostAPI","watchRemovePost","postSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport shortId, { generate } from \"shortid\";\nimport {\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_REQUEST,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    generateDummyPost,\n} from \"../reducers/post\";\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n//게시글 작성\nfunction addPostAPI() {\n    return axios.post(\"/api/post\");\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        const id = shortId.generate();\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({ type: ADD_POST_TO_ME, data: id });\n    } catch (err) {\n        put({ type: ADD_POST_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: ADD_COMMENT_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: ADD_COMMENT_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n//게시글 삭제\nfunction removePostAPI() {\n    return axios.post(\"/api/post\");\n}\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({ type: REMOVE_POST_OF_ME, data: action.data });\n    } catch (err) {\n        put({ type: REMOVE_POST_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchLoadPosts() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction loadPostAPI() {\n    return axios.post(\"/api/post\");\n}\nfunction* loadPosts(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(),\n        });\n    } catch (err) {\n        put({ type: LOAD_POSTS_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n    ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}