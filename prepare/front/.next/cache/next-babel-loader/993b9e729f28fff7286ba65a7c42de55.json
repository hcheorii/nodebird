{"ast":null,"code":"import { all, delay, fork, put, throttle } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from \"../reducers/post\";\nimport { generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n//게시글 작성\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n    //내가 썼는지 확인하기 위함\n  } catch (err) {\n    put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n  //ADD_POST_REQUEST 가 요청되면, addPost실행\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n//게시글 삭제\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//게시글 불러오기\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n  //5초안에 들어온 같은 요청은 무시해버림 (throttle)\n}\n\nfunction loadPostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n      //스크롤 넘어갈때, 10개씩 게속 불러온다.\n    });\n  } catch (err) {\n    put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["all","delay","fork","put","throttle","takeLatest","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","axios","post","addPost","action","id","generate","type","data","content","err","response","watchAddPost","addCommentAPI","postId","addComment","watchAddComment","removePostAPI","removePost","watchRemovePost","watchLoadPosts","loadPosts","loadPostAPI","postSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put, throttle } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport {\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_REQUEST,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    LOAD_POSTS_FAILURE,\n} from \"../reducers/post\";\nimport { generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\n//게시글 작성\nfunction addPostAPI() {\n    return axios.post(\"/api/post\");\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        const id = shortId.generate();\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({ type: ADD_POST_TO_ME, data: id });\n        //내가 썼는지 확인하기 위함\n    } catch (err) {\n        put({ type: ADD_POST_FAILURE, data: err.response.data });\n    }\n}\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n    //ADD_POST_REQUEST 가 요청되면, addPost실행\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: ADD_COMMENT_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: ADD_COMMENT_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n//게시글 삭제\nfunction removePostAPI() {\n    return axios.post(\"/api/post\");\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({ type: REMOVE_POST_OF_ME, data: action.data });\n    } catch (err) {\n        put({ type: REMOVE_POST_FAILURE, data: err.response.data });\n    }\n}\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//게시글 불러오기\n\nfunction* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    //5초안에 들어온 같은 요청은 무시해버림 (throttle)\n}\n\nfunction loadPostAPI() {\n    return axios.post(\"/api/post\");\n}\nfunction* loadPosts(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10),\n            //스크롤 넘어갈때, 10개씩 게속 불러온다.\n        });\n    } catch (err) {\n        put({ type: LOAD_POSTS_FAILURE, data: err.response.data });\n    }\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n    ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}