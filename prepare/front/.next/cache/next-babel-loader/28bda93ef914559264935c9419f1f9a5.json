{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nexport const initialValue = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"이현철\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }, {\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }, {\n      src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      User: {\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n};\n//가짜 데이토\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = {\n  id: 2,\n  content: \"?.\",\n  User: {\n    id: 1,\n    nickname: \"이현철\"\n  },\n  Images: [],\n  Comments: []\n};\nconst reducer = (state = initialValue, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: nullm\n      });\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        postAdded: true\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["initialValue","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","reducer","state","action","_objectSpread","nullm","ADD_POST","postAdded"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["export const initialValue = {\n    mainPosts: [\n        {\n            id: 1,\n            User: {\n                id: 1,\n                nickname: \"이현철\",\n            },\n            content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n            Images: [\n                {\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n                {\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n                {\n                    src: \"https://cdn.newswatch.kr/news/photo/202210/60598_55659_5929.png\",\n                },\n            ],\n            Comments: [\n                {\n                    User: {\n                        nickname: \"nero\",\n                    },\n                    content: \"우와 개정판이 나왔군요~\",\n                },\n                {\n                    User: {\n                        nickname: \"hero\",\n                    },\n                    content: \"얼른 사고싶어요~\",\n                },\n            ],\n        },\n    ],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n};\n//가짜 데이토\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst dummyPost = {\n    id: 2,\n    content: \"?.\",\n    User: {\n        id: 1,\n        nickname: \"이현철\",\n    },\n    Images: [],\n    Comments: [],\n};\n\nconst reducer = (state = initialValue, action) => {\n    switch (action.type) {\n        case ADD_POST_REQUEST:\n            return {\n                ...state,\n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: nullm,\n            };\n\n        case ADD_POST:\n            return {\n                ...state,\n                mainPosts: [dummyPost, ...state.mainPosts],\n                postAdded: true,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"],"mappings":";;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;EACxBC,SAAS,EAAE,CACP;IACIC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE;MACFD,EAAE,EAAE,CAAC;MACLE,QAAQ,EAAE;IACd,CAAC;IACDC,OAAO,EAAE,uBAAuB;IAChCC,MAAM,EAAE,CACJ;MACIC,GAAG,EAAE;IACT,CAAC,EACD;MACIA,GAAG,EAAE;IACT,CAAC,EACD;MACIA,GAAG,EAAE;IACT,CAAC,CACJ;IACDC,QAAQ,EAAE,CACN;MACIL,IAAI,EAAE;QACFC,QAAQ,EAAE;MACd,CAAC;MACDC,OAAO,EAAE;IACb,CAAC,EACD;MACIF,IAAI,EAAE;QACFC,QAAQ,EAAE;MACd,CAAC;MACDC,OAAO,EAAE;IACb,CAAC;EAET,CAAC,CACJ;EACD;EACAI,UAAU,EAAE,EAAE;EACd;EACAC,cAAc,EAAE,KAAK;EACrBC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE;AAClB,CAAC;AACD;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAElD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AAExD,OAAO,MAAMC,OAAO,GAAIC,IAAI,KAAM;EAC9BC,IAAI,EAAER,gBAAgB;EACtBO;AACJ,CAAC,CAAC;AACF,OAAO,MAAME,UAAU,GAAIF,IAAI,KAAM;EACjCC,IAAI,EAAEL,mBAAmB;EACzBI;AACJ,CAAC,CAAC;AAEF,MAAMG,SAAS,GAAG;EACdrB,EAAE,EAAE,CAAC;EACLG,OAAO,EAAE,IAAI;EACbF,IAAI,EAAE;IACFD,EAAE,EAAE,CAAC;IACLE,QAAQ,EAAE;EACd,CAAC;EACDE,MAAM,EAAE,EAAE;EACVE,QAAQ,EAAE;AACd,CAAC;AAED,MAAMgB,OAAO,GAAGA,CAACC,KAAK,GAAGzB,YAAY,EAAE0B,MAAM,KAAK;EAC9C,QAAQA,MAAM,CAACL,IAAI;IACf,KAAKR,gBAAgB;MACjB,OAAAc,aAAA,CAAAA,aAAA,KACOF,KAAK;QACRf,cAAc,EAAE,IAAI;QACpBC,WAAW,EAAE,KAAK;QAClBC,YAAY,EAAEgB;MAAK;IAG3B,KAAKC,QAAQ;MACT,OAAAF,aAAA,CAAAA,aAAA,KACOF,KAAK;QACRxB,SAAS,EAAE,CAACsB,SAAS,EAAE,GAAGE,KAAK,CAACxB,SAAS,CAAC;QAC1C6B,SAAS,EAAE;MAAI;IAEvB;MACI,OAAOL,KAAK;EACpB;AACJ,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}