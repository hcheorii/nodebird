{"ast":null,"code":"var _jsxFileName = \"/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport AppLayout from \"../components/AppLayout\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { useEffect } from \"react\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      if (\n      //만약 스크롤을 끝에서 -300까지 다 내렸으면\n      window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostsLoading) {\n          var _mainPosts;\n          //로딩중이지 않을때만 딱 한번\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            //새로운거 불러와라\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n    window.addEventListener(\"scroll\", onScroll); //스크롤 할때마다 발생하는 이벤트\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePost, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 20\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  })\n  //PostCard에 포스트 데이터 보내주기\n  ));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(context => {\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n}); //이  부분이  무조건 home보다 먼저 실행된다.\nexport default Home;","map":{"version":3,"names":["AppLayout","useSelector","useDispatch","PostCard","PostForm","useEffect","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Home","dispatch","me","state","user","mainPosts","hasMorePost","loadPostsLoading","retweetError","post","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","_mainPosts","lastId","length","id","type","addEventListener","removeEventListener","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","key","getServerSideProps","context","store"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/pages/index.js"],"sourcesContent":["import AppLayout from \"../components/AppLayout\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { useEffect } from \"react\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePost, loadPostsLoading, retweetError } =\n        useSelector((state) => state.post);\n    useEffect(() => {\n        if (retweetError) {\n            alert(retweetError);\n        }\n    }, [retweetError]);\n\n    useEffect(() => {\n        function onScroll() {\n            if (\n                //만약 스크롤을 끝에서 -300까지 다 내렸으면\n                window.scrollY + document.documentElement.clientHeight >\n                document.documentElement.scrollHeight - 300\n            ) {\n                if (hasMorePost && !loadPostsLoading) {\n                    //로딩중이지 않을때만 딱 한번\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\n                    dispatch({\n                        //새로운거 불러와라\n                        type: LOAD_POSTS_REQUEST,\n                        lastId,\n                    });\n                }\n            }\n        }\n        window.addEventListener(\"scroll\", onScroll); //스크롤 할때마다 발생하는 이벤트\n        return () => {\n            window.removeEventListener(\"scroll\", onScroll);\n        };\n    }, [hasMorePost, loadPostsLoading, mainPosts]);\n\n    return (\n        <AppLayout>\n            {me && <PostForm />}\n            {mainPosts.map((post) => (\n                <PostCard key={post.id} post={post} />\n                //PostCard에 포스트 데이터 보내주기\n            ))}\n        </AppLayout>\n    );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps((context) => {\n    context.store.dispatch({\n        type: LOAD_MY_INFO_REQUEST,\n    });\n    context.store.dispatch({\n        type: LOAD_POSTS_REQUEST,\n    });\n}); //이  부분이  무조건 home보다 먼저 실행된다.\nexport default Home;\n"],"mappings":";;;AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAC/C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACf,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAES;EAAG,CAAC,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACjD,MAAM;IAAEC,SAAS;IAAEC,WAAW;IAAEC,gBAAgB;IAAEC;EAAa,CAAC,GAC5DhB,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACM,IAAI,CAAC;EACtCb,SAAS,CAAC,MAAM;IACZ,IAAIY,YAAY,EAAE;MACdE,KAAK,CAACF,YAAY,CAAC;IACvB;EACJ,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBZ,SAAS,CAAC,MAAM;IACZ,SAASe,QAAQA,CAAA,EAAG;MAChB;MACI;MACAC,MAAM,CAACC,OAAO,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,GACtDF,QAAQ,CAACC,eAAe,CAACE,YAAY,GAAG,GAAG,EAC7C;QACE,IAAIX,WAAW,IAAI,CAACC,gBAAgB,EAAE;UAAA,IAAAW,UAAA;UAClC;UACA,MAAMC,MAAM,IAAAD,UAAA,GAAGb,SAAS,CAACA,SAAS,CAACe,MAAM,GAAG,CAAC,CAAC,cAAAF,UAAA,uBAA/BA,UAAA,CAAiCG,EAAE;UAClDpB,QAAQ,CAAC;YACL;YACAqB,IAAI,EAAEzB,kBAAkB;YACxBsB;UACJ,CAAC,CAAC;QACN;MACJ;IACJ;IACAP,MAAM,CAACW,gBAAgB,CAAC,QAAQ,EAAEZ,QAAQ,CAAC,CAAC,CAAC;IAC7C,OAAO,MAAM;MACTC,MAAM,CAACY,mBAAmB,CAAC,QAAQ,EAAEb,QAAQ,CAAC;IAClD,CAAC;EACL,CAAC,EAAE,CAACL,WAAW,EAAEC,gBAAgB,EAAEF,SAAS,CAAC,CAAC;EAE9C,OACIoB,KAAA,CAAClC,SAAS;IAAAmC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACL7B,EAAE,IAAIuB,KAAA,CAAC9B,QAAQ;IAAA+B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,EAClB1B,SAAS,CAAC2B,GAAG,CAAEvB,IAAI,IAChBgB,KAAA,CAAC/B,QAAQ;IAACuC,GAAG,EAAExB,IAAI,CAACY,EAAG;IAACZ,IAAI,EAAEA,IAAK;IAAAiB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE;EACrC;EACH,CACM,CAAC;AAEpB,CAAC;;AAED,OAAO,MAAMG,kBAAkB,GAAGnC,OAAO,CAACmC,kBAAkB,CAAEC,OAAO,IAAK;EACtEA,OAAO,CAACC,KAAK,CAACnC,QAAQ,CAAC;IACnBqB,IAAI,EAAExB;EACV,CAAC,CAAC;EACFqC,OAAO,CAACC,KAAK,CAACnC,QAAQ,CAAC;IACnBqB,IAAI,EAAEzB;EACV,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC;AACJ,eAAeG,IAAI"},"metadata":{},"sourceType":"module"}