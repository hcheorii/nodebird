{"ast":null,"code":"import { all, fork } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\nfunction* watchLogIn() {\n  //이벤트 리스터 같은 역할.\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이라는 액션이 실행되면, logIn함수를 실행시킨다.\n  //take는 일회용이다. takeEvery는 계속 받을 수 있다. 하지만 여러번 입력을 한번에 하게되면 그 여러개 요청이 모두 가기 때문에\n  //takeLatest를 사용한다.\n  //완료되지 않은 것들 중에서 로딩중인것들을 중단. 응답을 취소.\n  //throttle은 초를 정해서 그 안에서는 요청은 한번만 할 수 있게 설정할 수 있다.\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction logInAPI(data) {\n  //실제로 서버에 요청을 보내는 부분\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    // const result = yield call(logOutAPI); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signUpAPI() {\n  return axios(\"/api/signup\");\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* signUp(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","fork","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","watchLogIn","takeLatest","logIn","watchLogOut","logOut","logInAPI","data","axios","post","action","delay","put","type","err","error","response","logOutAPI","result","signUpAPI","watchSignUp","signUp","userSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/user.js"],"sourcesContent":["import { all, fork } from \"redux-saga/effects\";\n\nimport {\n    LOG_IN_SUCCESS,\n    LOG_IN_REQUEST,\n    LOG_IN_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    LOG_OUT_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n    SIGN_UP_FAILURE,\n} from \"../reducers/user\";\n\nfunction* watchLogIn() {\n    //이벤트 리스터 같은 역할.\n    yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이라는 액션이 실행되면, logIn함수를 실행시킨다.\n    //take는 일회용이다. takeEvery는 계속 받을 수 있다. 하지만 여러번 입력을 한번에 하게되면 그 여러개 요청이 모두 가기 때문에\n    //takeLatest를 사용한다.\n    //완료되지 않은 것들 중에서 로딩중인것들을 중단. 응답을 취소.\n    //throttle은 초를 정해서 그 안에서는 요청은 한번만 할 수 있게 설정할 수 있다.\n}\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction logInAPI(data) {\n    //실제로 서버에 요청을 보내는 부분\n    return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: LOG_IN_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: LOG_IN_FAILURE, error: err.response.data });\n    }\n}\n\nfunction logOutAPI() {\n    return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n    try {\n        yield delay(1000);\n        // const result = yield call(logOutAPI); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: LOG_OUT_SUCCESS, data: result.data });\n    } catch (err) {\n        put({ type: LOG_OUT_FAILURE, error: err.response.data });\n    }\n}\nfunction signUpAPI() {\n    return axios(\"/api/signup\");\n}\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* signUp(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(logInAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: SIGN_UP_SUCCESS, data: action.data });\n    } catch (err) {\n        put({ type: SIGN_UP_FAILURE, error: err.response.data });\n    }\n}\n\nexport default function* userSaga() {\n    yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;AAE9C,SACIC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,QACZ,kBAAkB;AAEzB,UAAUC,UAAUA,CAAA,EAAG;EACnB;EACA,MAAMC,UAAU,CAACT,cAAc,EAAEU,KAAK,CAAC,CAAC,CAAC;EACzC;EACA;EACA;EACA;AACJ;;AAEA,UAAUC,WAAWA,CAAA,EAAG;EACpB,MAAMF,UAAU,CAACP,eAAe,EAAEU,MAAM,CAAC;AAC7C;AAEA,SAASC,QAAQA,CAACC,IAAI,EAAE;EACpB;EACA,OAAOC,KAAK,CAACC,IAAI,CAAC,YAAY,EAAEF,IAAI,CAAC;AACzC;AAEA,UAAUJ,KAAKA,CAACO,MAAM,EAAE;EACpB,IAAI;IACA,MAAMC,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMC,GAAG,CAAC;MAAEC,IAAI,EAAErB,cAAc;MAAEe,IAAI,EAAEG,MAAM,CAACH;IAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOO,GAAG,EAAE;IACVF,GAAG,CAAC;MAAEC,IAAI,EAAEnB,cAAc;MAAEqB,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACT;IAAK,CAAC,CAAC;EAC3D;AACJ;AAEA,SAASU,SAASA,CAAA,EAAG;EACjB,OAAOT,KAAK,CAACC,IAAI,CAAC,aAAa,CAAC;AACpC;AAEA,UAAUJ,MAAMA,CAAA,EAAG;EACf,IAAI;IACA,MAAMM,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMC,GAAG,CAAC;MAAEC,IAAI,EAAEjB,eAAe;MAAEW,IAAI,EAAEW,MAAM,CAACX;IAAK,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOO,GAAG,EAAE;IACVF,GAAG,CAAC;MAAEC,IAAI,EAAEhB,eAAe;MAAEkB,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACT;IAAK,CAAC,CAAC;EAC5D;AACJ;AACA,SAASY,SAASA,CAAA,EAAG;EACjB,OAAOX,KAAK,CAAC,aAAa,CAAC;AAC/B;AACA,UAAUY,WAAWA,CAAA,EAAG;EACpB,MAAMlB,UAAU,CAACJ,eAAe,EAAEuB,MAAM,CAAC;AAC7C;AACA,UAAUA,MAAMA,CAACX,MAAM,EAAE;EACrB,IAAI;IACA,MAAMC,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMC,GAAG,CAAC;MAAEC,IAAI,EAAEd,eAAe;MAAEQ,IAAI,EAAEG,MAAM,CAACH;IAAK,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOO,GAAG,EAAE;IACVF,GAAG,CAAC;MAAEC,IAAI,EAAEb,eAAe;MAAEe,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACT;IAAK,CAAC,CAAC;EAC5D;AACJ;AAEA,eAAe,UAAUe,QAAQA,CAAA,EAAG;EAChC,MAAMhC,GAAG,CAAC,CAACC,IAAI,CAACU,UAAU,CAAC,EAAEV,IAAI,CAACa,WAAW,CAAC,EAAEb,IAAI,CAAC6B,WAAW,CAAC,CAAC,CAAC;AACvE"},"metadata":{},"sourceType":"module"}