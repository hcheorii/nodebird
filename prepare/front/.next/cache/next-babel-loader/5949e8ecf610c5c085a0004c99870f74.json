{"ast":null,"code":"import { produce } from \"immer\";\nexport const initialValue = {\n  mainPosts: [],\n  //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n  imagePaths: [],\n  hasMorePost: true,\n  //true면 가져올 시도를 해라. (스크롤 했을 때)\n\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  //게시글 추가가 완료되었을때 TRue\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n//가짜 데이터\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) => produce(state, draft => {\n  switch (action.type) {\n    //게시글 추가\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      //unshift란 배열의 맨 앞에다가 추가하는 함수\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    //게시글 불러오기\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      //concat은 두개 이상의 배열을 합칠 때 사용\n      //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      //50개보다 적으면 불러와야함\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    //댓글 추가\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS:\n      //immer버전 (너무 간단함)\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId //routes/post.js에서 PostId를 보내줌\n      ); //해당 게시글 찾기\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      //댓글 넣어주기\n      break;\n\n    //immer를 안 쓴 부분\n    // const postIndex = state.mainPosts.findIndex(\n    //     (v) => v.id === action.data.postId\n    // );\n    // const post = { ...state.mainPosts[postIndex] };\n\n    // post.Comments = [\n    //     dummyComment(action.data.content),\n    //     ...post.Comments,\n    // ]; //얕은 복사\n\n    // const mainPosts = [...state.mainPosts];\n    // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n    // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n    // return {\n    //     ...state,\n    //     mainPosts,\n    //     addCommentLoading: false,\n    //     addCommentDone: true,\n    // };\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    //게시글 삭제\n    case REMOVE_POST_REQUEST:\n      draft.removePostDone = false;\n      draft.removePostLoading = true;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    default:\n      break;\n  }\n});\nexport default reducer;","map":{"version":3,"names":["produce","initialValue","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","unshift","error","concat","length","post","find","v","id","PostId","Comments","filter"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/reducers/post.js"],"sourcesContent":["import { produce } from \"immer\";\nexport const initialValue = {\n    mainPosts: [],\n    //이미지업로드 할떄 이미지경로들이 여기 들어간다.\n    imagePaths: [],\n\n    hasMorePost: true, //true면 가져올 시도를 해라. (스크롤 했을 때)\n\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    //게시글 추가가 완료되었을때 TRue\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n};\n//가짜 데이터\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n//리듀서란 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(단, 불변성은 지키면서)\n//draft는 불변성 상관없이 바꾸면 immer가 알아서 불변성있게 만들어준다.\nconst reducer = (state = initialValue, action) =>\n    produce(state, (draft) => {\n        switch (action.type) {\n            //게시글 추가\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(action.data);\n                draft.imagePaths = [];\n                //unshift란 배열의 맨 앞에다가 추가하는 함수\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n\n            //게시글 불러오기\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                draft.mainPosts = action.data.concat(draft.mainPosts);\n                //concat은 두개 이상의 배열을 합칠 때 사용\n                //action.data에는 더미데이터들이 들어있고 draft.mainPosts는 원래 데이터\n                draft.hasMorePost = draft.mainPosts.length < 50;\n                //50개보다 적으면 불러와야함\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = action.error;\n                break;\n\n            //댓글 추가\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n\n            case ADD_COMMENT_SUCCESS:\n                //immer버전 (너무 간단함)\n                const post = draft.mainPosts.find(\n                    (v) => v.id === action.data.PostId //routes/post.js에서 PostId를 보내줌\n                ); //해당 게시글 찾기\n                post.Comments.unshift(action.data);\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                //댓글 넣어주기\n                break;\n\n            //immer를 안 쓴 부분\n            // const postIndex = state.mainPosts.findIndex(\n            //     (v) => v.id === action.data.postId\n            // );\n            // const post = { ...state.mainPosts[postIndex] };\n\n            // post.Comments = [\n            //     dummyComment(action.data.content),\n            //     ...post.Comments,\n            // ]; //얕은 복사\n\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = post; //댓글 추가하는 부분 너무어려움..\n            // //불변성을 지키다 보니 가독성이 너무 안좋음\n\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addCommentLoading: false,\n            //     addCommentDone: true,\n            // };\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n\n            //게시글 삭제\n            case REMOVE_POST_REQUEST:\n                draft.removePostDone = false;\n                draft.removePostLoading = true;\n                draft.removePostError = null;\n                break;\n\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter(\n                    (v) => v.id !== action.data\n                );\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n            default:\n                break;\n        }\n    });\n\nexport default reducer;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAO,MAAMC,YAAY,GAAG;EACxBC,SAAS,EAAE,EAAE;EACb;EACAC,UAAU,EAAE,EAAE;EAEdC,WAAW,EAAE,IAAI;EAAE;;EAEnBC,gBAAgB,EAAE,KAAK;EACvBC,aAAa,EAAE,KAAK;EACpBC,cAAc,EAAE,IAAI;EACpB;EACAC,cAAc,EAAE,KAAK;EACrBC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,IAAI;EAElBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE,IAAI;EAErBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE;AACrB,CAAC;AACD;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAAmB;AACpD,OAAO,MAAMC,iBAAiB,GAAG,mBAAmB;AACpD,OAAO,MAAMC,iBAAiB,GAAG,mBAAmB;AAEpD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AAExD,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AACtD,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AACtD,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AAEtD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAElD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AAExD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AAExD,OAAO,MAAMC,OAAO,GAAIC,IAAI,KAAM;EAC9BC,IAAI,EAAEX,gBAAgB;EACtBU;AACJ,CAAC,CAAC;AACF,OAAO,MAAME,UAAU,GAAIF,IAAI,KAAM;EACjCC,IAAI,EAAEL,mBAAmB;EACzBI;AACJ,CAAC,CAAC;;AAEF;AACA;AACA,MAAMG,OAAO,GAAGA,CAACC,KAAK,GAAGvC,YAAY,EAAEwC,MAAM,KACzCzC,OAAO,CAACwC,KAAK,EAAGE,KAAK,IAAK;EACtB,QAAQD,MAAM,CAACJ,IAAI;IACf;IACA,KAAKX,gBAAgB;MACjBgB,KAAK,CAAClC,cAAc,GAAG,IAAI;MAC3BkC,KAAK,CAACjC,WAAW,GAAG,KAAK;MACzBiC,KAAK,CAAChC,YAAY,GAAG,IAAI;MACzB;IACJ,KAAKiB,gBAAgB;MACjBe,KAAK,CAAClC,cAAc,GAAG,KAAK;MAC5BkC,KAAK,CAACjC,WAAW,GAAG,IAAI;MACxBiC,KAAK,CAACxC,SAAS,CAACyC,OAAO,CAACF,MAAM,CAACL,IAAI,CAAC;MACpCM,KAAK,CAACvC,UAAU,GAAG,EAAE;MACrB;MACA;IACJ,KAAKyB,gBAAgB;MACjBc,KAAK,CAAClC,cAAc,GAAG,KAAK;MAC5BkC,KAAK,CAAChC,YAAY,GAAG+B,MAAM,CAACG,KAAK;MACjC;;IAEJ;IACA,KAAKrB,kBAAkB;MACnBmB,KAAK,CAACrC,gBAAgB,GAAG,IAAI;MAC7BqC,KAAK,CAACpC,aAAa,GAAG,KAAK;MAC3BoC,KAAK,CAACnC,cAAc,GAAG,IAAI;MAC3B;IACJ,KAAKiB,kBAAkB;MACnBkB,KAAK,CAACrC,gBAAgB,GAAG,KAAK;MAC9BqC,KAAK,CAACpC,aAAa,GAAG,IAAI;MAC1BoC,KAAK,CAACxC,SAAS,GAAGuC,MAAM,CAACL,IAAI,CAACS,MAAM,CAACH,KAAK,CAACxC,SAAS,CAAC;MACrD;MACA;MACAwC,KAAK,CAACtC,WAAW,GAAGsC,KAAK,CAACxC,SAAS,CAAC4C,MAAM,GAAG,EAAE;MAC/C;MACA;IACJ,KAAKrB,kBAAkB;MACnBiB,KAAK,CAACrC,gBAAgB,GAAG,KAAK;MAC9BqC,KAAK,CAACnC,cAAc,GAAGkC,MAAM,CAACG,KAAK;MACnC;;IAEJ;IACA,KAAKZ,mBAAmB;MACpBU,KAAK,CAAC5B,iBAAiB,GAAG,IAAI;MAC9B4B,KAAK,CAAC3B,cAAc,GAAG,KAAK;MAC5B2B,KAAK,CAAC1B,eAAe,GAAG,IAAI;MAC5B;IAEJ,KAAKiB,mBAAmB;MACpB;MACA,MAAMc,IAAI,GAAGL,KAAK,CAACxC,SAAS,CAAC8C,IAAI,CAC5BC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKT,MAAM,CAACL,IAAI,CAACe,MAAM,CAAC;MACvC,CAAC,CAAC,CAAC;MACHJ,IAAI,CAACK,QAAQ,CAACT,OAAO,CAACF,MAAM,CAACL,IAAI,CAAC;MAClCM,KAAK,CAAC5B,iBAAiB,GAAG,KAAK;MAC/B4B,KAAK,CAAC3B,cAAc,GAAG,IAAI;MAC3B;MACA;;IAEJ;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA,KAAKmB,mBAAmB;MACpBQ,KAAK,CAAC5B,iBAAiB,GAAG,KAAK;MAC/B4B,KAAK,CAAC1B,eAAe,GAAGyB,MAAM,CAACG,KAAK;MACpC;;IAEJ;IACA,KAAKf,mBAAmB;MACpBa,KAAK,CAAC9B,cAAc,GAAG,KAAK;MAC5B8B,KAAK,CAAC/B,iBAAiB,GAAG,IAAI;MAC9B+B,KAAK,CAAC7B,eAAe,GAAG,IAAI;MAC5B;IAEJ,KAAKiB,mBAAmB;MACpBY,KAAK,CAAC/B,iBAAiB,GAAG,KAAK;MAC/B+B,KAAK,CAAC9B,cAAc,GAAG,IAAI;MAC3B8B,KAAK,CAACxC,SAAS,GAAGwC,KAAK,CAACxC,SAAS,CAACmD,MAAM,CACnCJ,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKT,MAAM,CAACL,IAC3B,CAAC;MACD;IACJ,KAAKL,mBAAmB;MACpBW,KAAK,CAAC/B,iBAAiB,GAAG,KAAK;MAC/B+B,KAAK,CAAC7B,eAAe,GAAG4B,MAAM,CAACG,KAAK;MACpC;IACJ;MACI;EACR;AACJ,CAAC,CAAC;AAEN,eAAeL,OAAO"},"metadata":{},"sourceType":"module"}