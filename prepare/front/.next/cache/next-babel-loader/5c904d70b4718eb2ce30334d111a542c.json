{"ast":null,"code":"import { all, delay, fork, put, throttle, call } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from \"axios\";\nfunction likePostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction unlikePostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//게시글 작성\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    //백에서 준게 result.data안에 들어있다.\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data //우리가 만든 게시물이 들어있다\n    });\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n    //내가 썼는지 확인하기 위함\n  } catch (err) {\n    console.error(err);\n    put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//게시글 삭제\nfunction removePostAPI() {\n  return axios.post(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//게시글 불러오기\n\nfunction loadPostAPI() {\n  return axios.get(\"/posts\");\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n      //스크롤 넘어갈때, 10개씩 게속 불러온다.\n    });\n  } catch (err) {\n    console.error(err);\n    put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n  //ADD_POST_REQUEST 가 요청되면, addPost실행\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n  //5초안에 들어온 같은 요청은 무시해버림 (throttle)\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["all","delay","fork","put","throttle","call","takeLatest","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","likePostAPI","data","post","content","likePost","action","result","type","err","console","error","response","unlikePostAPI","unlikePost","addPostAPI","addPost","id","addCommentAPI","postId","addComment","log","removePostAPI","removePost","loadPostAPI","get","loadPosts","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","watchUnlikePost","watchLikePost","postSaga"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put, throttle, call } from \"redux-saga/effects\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport {\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_REQUEST,\n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS,\n    LOAD_POSTS_FAILURE,\n    LIKE_POST_FAILURE,\n    LIKE_POST_REQUEST,\n    LIKE_POST_SUCCESS,\n    UNLIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST,\n    UNLIKE_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from \"axios\";\n\nfunction likePostAPI(data) {\n    return axios.post(\"/post\", { content: data });\n}\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        put({ type: LIKE_POST_FAILURE, data: err.response.data });\n    }\n}\n\nfunction unlikePostAPI(data) {\n    return axios.post(\"/post\", { content: data });\n}\n\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        put({ type: UNLIKE_POST_FAILURE, data: err.response.data });\n    }\n}\n\n//게시글 작성\nfunction addPostAPI(data) {\n    return axios.post(\"/post\", { content: data });\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        //백에서 준게 result.data안에 들어있다.\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data, //우리가 만든 게시물이 들어있다\n        });\n        yield put({ type: ADD_POST_TO_ME, data: result.data.id });\n        //내가 썼는지 확인하기 위함\n    } catch (err) {\n        console.error(err);\n        put({ type: ADD_POST_FAILURE, data: err.response.data });\n    }\n}\n\n//댓글작성\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({ type: ADD_COMMENT_SUCCESS, data: result.data });\n    } catch (err) {\n        console.log(err);\n        put({ type: ADD_COMMENT_FAILURE, data: err.response.data });\n    }\n}\n\n//게시글 삭제\nfunction removePostAPI() {\n    return axios.post(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({ type: REMOVE_POST_OF_ME, data: action.data });\n    } catch (err) {\n        put({ type: REMOVE_POST_FAILURE, data: err.response.data });\n    }\n}\n\n//게시글 불러오기\n\nfunction loadPostAPI() {\n    return axios.get(\"/posts\");\n}\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostAPI, action.data); //로그인 요청에 대해 결과값으로 받을 수 있다.\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n            //스크롤 넘어갈때, 10개씩 게속 불러온다.\n        });\n    } catch (err) {\n        console.error(err);\n        put({ type: LOAD_POSTS_FAILURE, data: err.response.data });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n    //ADD_POST_REQUEST 가 요청되면, addPost실행\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    //5초안에 들어온 같은 요청은 무시해버림 (throttle)\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchLoadPosts),\n        fork(watchAddComment),\n        fork(watchRemovePost),\n    ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}