{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/components/PostForm.js\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport React, { useCallback, useRef, useEffect } from \"react\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\nimport useInput from \"../hooks/useInput\";\nvar PostForm = function PostForm() {\n  _s();\n  var dispatch = useDispatch();\n  var _useInput = useInput(\"\"),\n    _useInput2 = _slicedToArray(_useInput, 3),\n    text = _useInput2[0],\n    onChangeText = _useInput2[1],\n    setText = _useInput2[2];\n  var _useSelector = useSelector(function (state) {\n      return state.post;\n    }),\n    imagePaths = _useSelector.imagePaths,\n    addPostDone = _useSelector.addPostDone;\n  var imageInput = useRef();\n  //ref는 실제DOM에 접근하기 위해서 사용\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append(\"image\", p);\n    });\n    formData.append(\"content\", text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n    // setText(\"\"); //여기서 이렇게 초기화해줄 경우에 서버쪽에서 응답으로 오류가 났을때 게시물이 잘 올라가지 않았음에도 초기화되어버림.\n    //그래서 위에 useEffect부분을 따로 작성해줌.\n    // dispatch(addPost(text));\n  }, [text, imagePaths]);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log(\"images\", e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  });\n  return __jsx(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\" //이미지의 형식. 비디오도 대부분 이 형식을 따름\n    ,\n    onFinish: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages //이미지를 선택하고 확인을 눌렀을 때 발생하는 이벤트\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": \"right\"\n    },\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: \"inline-block\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: {\n        width: \"200px\"\n      },\n      alt: v,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, __jsx(Button, {\n      onClick: onRemoveImage(i),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n_s(PostForm, \"C1p1llkvJWWCjVignI99W3WSt+I=\", false, function () {\n  return [useDispatch, useInput, useSelector];\n});\n_c = PostForm;\nexport default PostForm;\nvar _c;\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["Form","Input","Button","useSelector","useDispatch","React","useCallback","useRef","useEffect","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","useInput","PostForm","_s","dispatch","_useInput","_useInput2","_slicedToArray","text","onChangeText","setText","_useSelector","state","post","imagePaths","addPostDone","imageInput","onSubmit","formData","FormData","forEach","p","append","type","data","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","__jsx","style","margin","encType","onFinish","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","TextArea","value","onChange","maxLength","placeholder","name","multiple","hidden","ref","onClick","htmlType","map","v","i","key","display","src","concat","width","alt","_c","$RefreshReg$"],"sources":["/Users/ihyeoncheol/Desktop/nodebird_project/prepare/front/components/PostForm.js"],"sourcesContent":["import { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport React, { useCallback, useRef, useEffect } from \"react\";\nimport {\n    ADD_POST_REQUEST,\n    UPLOAD_IMAGES_REQUEST,\n    REMOVE_IMAGE,\n} from \"../reducers/post\";\nimport useInput from \"../hooks/useInput\";\n\nconst PostForm = () => {\n    const dispatch = useDispatch();\n    const [text, onChangeText, setText] = useInput(\"\");\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\n\n    const imageInput = useRef();\n    //ref는 실제DOM에 접근하기 위해서 사용\n\n    useEffect(() => {\n        if (addPostDone) {\n            setText(\"\");\n        }\n    }, [addPostDone]);\n\n    const onSubmit = useCallback(() => {\n        const formData = new FormData();\n        imagePaths.forEach((p) => {\n            formData.append(\"image\", p);\n        });\n        formData.append(\"content\", text);\n        dispatch({\n            type: ADD_POST_REQUEST,\n            data: formData,\n        });\n        // setText(\"\"); //여기서 이렇게 초기화해줄 경우에 서버쪽에서 응답으로 오류가 났을때 게시물이 잘 올라가지 않았음에도 초기화되어버림.\n        //그래서 위에 useEffect부분을 따로 작성해줌.\n        // dispatch(addPost(text));\n    }, [text, imagePaths]);\n\n    const onClickImageUpload = useCallback(() => {\n        imageInput.current.click();\n    }, [imageInput.current]);\n\n    const onChangeImages = useCallback((e) => {\n        console.log(\"images\", e.target.files);\n        const imageFormData = new FormData();\n        [].forEach.call(e.target.files, (f) => {\n            imageFormData.append(\"image\", f);\n        });\n        dispatch({\n            type: UPLOAD_IMAGES_REQUEST,\n            data: imageFormData,\n        });\n    }, []);\n\n    const onRemoveImage = useCallback((index) => () => {\n        dispatch({\n            type: REMOVE_IMAGE,\n            data: index,\n        });\n    });\n\n    return (\n        <Form\n            style={{ margin: \"10px 0 20px\" }}\n            encType=\"multipart/form-data\" //이미지의 형식. 비디오도 대부분 이 형식을 따름\n            onFinish={onSubmit}\n        >\n            <Input.TextArea\n                value={text}\n                onChange={onChangeText}\n                maxLength={140}\n                placeholder=\"어떤 신기한 일이 있었나요?\"\n            />\n            <div>\n                <input\n                    type=\"file\"\n                    name=\"image\"\n                    multiple\n                    hidden\n                    ref={imageInput}\n                    onChange={onChangeImages} //이미지를 선택하고 확인을 눌렀을 때 발생하는 이벤트\n                />\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n                <Button\n                    type=\"primary\"\n                    style={{ float: \"right\" }}\n                    htmlType=\"submit\"\n                >\n                    짹짹\n                </Button>\n            </div>\n            <div>\n                {imagePaths.map((v, i) => (\n                    <div key={v} style={{ display: \"inline-block\" }}>\n                        <img\n                            src={`http://localhost:3065/${v}`}\n                            style={{ width: \"200px\" }}\n                            alt={v}\n                        />\n                        <div>\n                            <Button onClick={onRemoveImage(i)}>제거</Button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </Form>\n    );\n};\n\nexport default PostForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}